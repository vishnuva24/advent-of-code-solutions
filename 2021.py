import collections
from math import floor
from collections import deque
import statistics
from collections import defaultdict

# day_1:1
alt_str = '''141
140
160
161
162
172
178
185
184
186
187
195
216
239
243
247
248
243
224
230
227
228
229
231
220
225
226
246
219
222
225
226
225
236
243
251
245
248
250
253
257
258
269
272
284
298
279
280
282
289
296
299
307
299
304
307
306
309
319
325
333
348
349
362
367
369
371
373
384
389
390
404
418
427
428
429
430
433
435
423
442
443
444
445
446
449
454
472
479
497
505
506
507
520
524
526
527
531
535
534
535
541
542
521
526
521
529
531
543
551
557
574
576
580
585
606
617
637
642
643
655
656
661
662
661
664
670
676
678
686
696
697
694
699
706
719
723
724
721
722
723
748
749
750
751
755
758
759
767
773
791
796
808
813
809
820
819
822
823
828
827
828
818
827
837
844
847
848
882
883
887
889
888
890
894
895
926
970
977
989
993
985
1003
997
1006
1011
1017
1018
1021
1023
1027
1038
1040
1044
1040
1046
1062
1073
1078
1094
1097
1101
1115
1118
1114
1117
1119
1124
1126
1127
1131
1114
1115
1134
1137
1139
1141
1143
1159
1162
1164
1173
1178
1179
1180
1181
1185
1191
1192
1193
1212
1210
1213
1215
1211
1216
1217
1230
1222
1231
1232
1234
1235
1228
1234
1235
1246
1257
1264
1262
1271
1273
1274
1279
1281
1292
1300
1302
1304
1314
1315
1320
1331
1332
1333
1334
1351
1352
1353
1342
1341
1351
1372
1389
1390
1384
1390
1406
1405
1410
1411
1413
1433
1440
1439
1445
1447
1472
1467
1489
1505
1506
1518
1520
1523
1538
1536
1547
1550
1555
1557
1563
1559
1565
1564
1591
1592
1604
1607
1606
1620
1634
1631
1633
1648
1663
1643
1647
1652
1655
1656
1658
1659
1673
1674
1681
1661
1666
1657
1659
1672
1673
1674
1683
1676
1689
1691
1692
1703
1719
1720
1723
1727
1741
1742
1749
1751
1772
1788
1794
1795
1797
1798
1799
1800
1804
1812
1803
1805
1806
1807
1818
1820
1801
1799
1803
1802
1803
1818
1815
1818
1820
1833
1841
1843
1849
1846
1851
1852
1863
1865
1866
1868
1871
1872
1873
1880
1894
1895
1903
1907
1909
1912
1902
1906
1914
1915
1886
1892
1893
1895
1898
1900
1901
1897
1899
1906
1907
1891
1902
1903
1911
1913
1917
1915
1928
1953
1963
1965
1967
1973
1964
1968
1971
1972
1985
1999
1998
2024
2048
2053
2054
2056
2058
2070
2072
2073
2076
2077
2080
2083
2091
2094
2079
2089
2090
2085
2089
2087
2089
2090
2114
2115
2117
2120
2105
2110
2111
2110
2124
2134
2140
2150
2152
2153
2154
2163
2161
2162
2164
2165
2177
2178
2184
2185
2186
2199
2206
2213
2217
2234
2239
2242
2253
2264
2263
2271
2278
2279
2280
2284
2288
2299
2314
2313
2312
2310
2311
2314
2310
2311
2326
2328
2351
2335
2374
2376
2372
2376
2382
2386
2392
2402
2403
2405
2410
2411
2413
2424
2425
2435
2463
2443
2472
2482
2484
2485
2503
2506
2507
2509
2505
2530
2531
2527
2530
2541
2542
2563
2571
2572
2568
2575
2576
2577
2581
2582
2590
2602
2619
2621
2622
2625
2641
2658
2672
2674
2679
2676
2681
2674
2675
2676
2679
2700
2703
2704
2685
2690
2685
2699
2716
2718
2714
2727
2728
2729
2730
2739
2746
2712
2713
2715
2719
2723
2714
2716
2715
2723
2719
2726
2727
2742
2744
2750
2763
2760
2761
2764
2765
2781
2785
2787
2803
2804
2805
2809
2815
2788
2792
2810
2822
2824
2834
2859
2858
2859
2863
2864
2860
2861
2859
2869
2871
2860
2867
2868
2873
2874
2882
2890
2882
2883
2891
2892
2902
2911
2923
2924
2928
2947
2948
2949
2952
2963
2966
2967
2970
2973
2978
2981
2973
2988
3000
3001
3002
3027
3002
3003
3029
3030
3035
3041
3043
3041
3042
3012
3017
3021
3026
3046
3049
3059
3058
3065
3066
3069
3071
3073
3075
3081
3079
3091
3103
3117
3127
3151
3122
3123
3125
3148
3149
3151
3152
3158
3161
3165
3167
3170
3173
3169
3171
3176
3177
3178
3179
3184
3183
3185
3188
3189
3205
3206
3209
3210
3211
3213
3223
3226
3233
3236
3235
3255
3263
3287
3284
3291
3290
3291
3295
3296
3305
3301
3302
3303
3329
3330
3339
3345
3358
3359
3360
3364
3361
3369
3381
3383
3384
3386
3392
3391
3390
3396
3426
3427
3429
3428
3451
3460
3461
3463
3490
3497
3496
3520
3525
3527
3531
3533
3532
3559
3563
3564
3572
3574
3575
3578
3579
3580
3578
3572
3575
3576
3560
3559
3558
3560
3558
3570
3572
3573
3574
3581
3596
3601
3597
3603
3601
3612
3611
3614
3624
3625
3626
3642
3671
3678
3681
3690
3696
3694
3686
3700
3701
3703
3709
3711
3705
3713
3711
3723
3726
3728
3736
3739
3740
3747
3755
3758
3770
3773
3765
3773
3812
3814
3817
3819
3826
3830
3829
3831
3832
3833
3834
3840
3853
3856
3857
3869
3886
3888
3896
3880
3900
3902
3905
3925
3931
3934
3935
3937
3940
3954
3980
3981
3982
3979
3980
3985
3994
3999
4000
4002
4014
4024
4028
4029
4034
4036
4045
4046
4052
4053
4066
4072
4085
4084
4091
4092
4110
4115
4128
4130
4141
4145
4146
4152
4153
4165
4185
4175
4179
4192
4207
4202
4210
4212
4223
4231
4232
4231
4233
4236
4249
4238
4239
4244
4262
4276
4290
4287
4295
4293
4301
4302
4314
4317
4323
4340
4329
4330
4343
4346
4370
4371
4372
4387
4408
4410
4415
4414
4416
4431
4432
4433
4438
4439
4457
4449
4448
4453
4454
4444
4445
4453
4456
4457
4452
4475
4476
4474
4475
4481
4462
4464
4465
4467
4466
4468
4480
4494
4496
4499
4515
4510
4512
4519
4524
4507
4509
4510
4519
4520
4478
4481
4489
4496
4502
4478
4469
4475
4498
4501
4507
4519
4523
4549
4561
4563
4577
4583
4592
4612
4613
4627
4661
4707
4720
4721
4720
4717
4679
4690
4694
4699
4701
4711
4715
4716
4717
4718
4721
4723
4731
4726
4728
4730
4731
4732
4746
4749
4763
4762
4759
4795
4804
4802
4803
4790
4808
4820
4836
4839
4843
4857
4870
4875
4865
4874
4876
4892
4893
4894
4900
4903
4907
4915
4917
4918
4919
4925
4962
4963
4965
4971
4972
4962
4987
4994
4995
4999
5001
5006
5010
5017
5020
5036
5037
5039
5056
5058
5062
5063
5059
5060
5061
5056
5061
5071
5069
5079
5096
5097
5073
5081
5082
5083
5107
5111
5110
5111
5125
5143
5149
5151
5186
5191
5193
5194
5176
5178
5179
5181
5182
5206
5202
5209
5217
5218
5225
5221
5224
5226
5227
5244
5245
5244
5252
5259
5265
5258
5262
5267
5271
5275
5276
5273
5274
5279
5280
5281
5304
5285
5286
5293
5310
5315
5319
5324
5325
5336
5337
5339
5340
5339
5340
5341
5337
5334
5344
5347
5361
5367
5382
5390
5391
5394
5397
5393
5406
5413
5414
5410
5407
5408
5412
5413
5422
5438
5432
5433
5435
5459
5464
5465
5468
5485
5486
5487
5488
5497
5498
5499
5503
5506
5519
5521
5525
5508
5514
5518
5529
5542
5544
5545
5542
5543
5551
5552
5527
5529
5534
5536
5554
5553
5554
5543
5549
5550
5544
5517
5528
5542
5550
5569
5574
5584
5581
5582
5584
5577
5576
5577
5586
5592
5618
5622
5635
5646
5649
5650
5652
5667
5669
5671
5672
5689
5682
5680
5681
5684
5695
5697
5699
5700
5713
5720
5737
5768
5787
5785
5771
5778
5784
5792
5783
5787
5791
5796
5806
5812
5816
5815
5816
5818
5820
5821
5840
5859
5861
5894
5897
5919
5946
5947
5952
5954
5957
5953
5956
5933
5921
5937
5942
5944
5962
5964
5965
5971
5972
5971
5976
6014
6012
6015
5999
6000
6014
5999
6010
6020
6026
6029
6032
6045
6044
6046
6085
6077
6086
6113
6114
6122
6119
6123
6124
6126
6145
6154
6161
6162
6163
6164
6167
6191
6193
6187
6194
6201
6188
6179
6197
6216
6218
6223
6222
6225
6211
6214
6218
6187
6184
6186
6212
6220
6221
6223
6246
6249
6259
6264
6292
6296
6300
6309
6327
6329
6347
6349
6362
6365
6357
6383
6385
6390
6393
6394
6398
6392
6393
6394
6397
6398
6420
6424
6418
6419
6430
6431
6437
6444
6450
6452
6462
6464
6466
6489
6499
6509
6517
6518
6519
6520
6511
6512
6515
6516
6517
6519
6521
6523
6525
6528
6535
6544
6545
6560
6559
6567
6586
6594
6631
6639
6647
6648
6650
6654
6665
6662
6696
6697
6698
6699
6708
6709
6725
6737
6746
6747
6751
6765
6766
6768
6779
6780
6797
6822
6830
6837
6834
6842
6831
6849
6862
6863
6864
6871
6875
6881
6886
6888
6898
6906
6911
6912
6926
6927
6928
6929
6949
6951
6950
6951
6950
6949
6950
6951
6944
6947
6946
6948
6950
6951
6952
6941
6946
6953
6960
6959
6957
6958
6960
6975
6976
6978
6970
6972
6970
6973
6974
6985
6986
6998
6999
7022
7029
7028
7033
7035
7037
7047
7048
7061
7068
7082
7081
7069
7075
7077
7085
7107
7108
7106
7107
7110
7117
7129
7136
7145
7146
7144
7147
7153
7154
7173
7178
7179
7190
7192
7199
7204
7206
7210
7211
7212
7216
7241
7256
7261
7266
7265
7267
7268
7257
7258
7264
7265
7270
7272
7285
7297
7292
7288
7292
7293
7297
7296
7294
7301
7304
7310
7311
7297
7300
7306
7315
7327
7332
7333
7354
7370
7382
7393
7394
7395
7410
7399
7400
7408
7414
7419
7423
7424
7428
7396
7404
7413
7414
7417
7414
7415
7417
7418
7419
7427
7434
7456
7457
7472
7481
7482
7483
7484
7491
7495
7507
7508
7509
7508
7509
7510
7511
7512
7520
7526
7530
7535
7536
7540
7536
7535
7544
7545
7547
7562
7541
7544
7563
7572
7581
7583
7570
7572
7594
7598
7601
7615
7619
7620
7621
7644
7668
7666
7668
7663
7661
7662
7661
7662
7676
7710
7711
7712
7724
7726
7736
7738
7747
7748
7751
7763
7754
7757
7761
7764
7763
7764
7768
7773
7772
7787
7795
7805
7821
7822
7823
7837
7839
7840
7834
7852
7828
7817
7819
7823
7834
7839
7869
7889
7904
7905
7913
7910
7907
7913
7908
7910
7912
7914
7902
7904
7909
7905
7908
7916
7918
7919
7920
7925
7930
7955
7956
7959
7960
7966
7970
7955
7970
7971
7972
7973
7974
7972
7973
7972
7981
7982
7985
7989
7995
8013
8014
8015
8017
8021
8022
8026
8034
8035
8037
8038
8042
8045
8046
8047
8063
8069
8091
8094
8095
8096
8112
8120
8115
8119
8114
8115
8147
8164
8165
8167
8171
8173
8176
8174
8178
8205
8199
8197
8198
8200
8202
8207
8223
8237
8238
8240
8253
8264
8268
8279
8280
8293
8309
8310
8311
8310
8316
8313
8319
8347
8353
8337
8362
8366
8375
8380
8412
8414
8419
8422
8424
8425
8430
8431
8449
8452
8458
8447
8457
8458
8472
8473
8479
8485
8486
8488
8489
8490
8491
8497
8492
8495
8501
8504
8507
8524
8523
8516
8521
8525
8534
8535
8538
8543
8544
8563
8587
8592
8614
8619
8627
8628
8620
8616
8624
8626
8627
8616
8613
8614
8615
8616
8621
8627
8631
8640
8632
8633
8643
8644
8652
8655
8658
8665
8662
8672
8684
8685
8691
8692
8707
8709
8713
8714
8719
8722
8725
8730
8736
8748
8751
8752
8756
8761
8766
8775
8788
8797
8798
8810
8802
8797
8800
8807
8811
8812
8821
8825
8826
8839
8830
8828
8829
8835
8837
8845
8850
8848
8856
8864
8875
8876
8886
8885
8884
8899
8880
8884
8886
8887
8892
8893
8900
8903
8906
8907
8908
8911
8910
8911
8913
8919
8920
8918
8919
8923
8924
8925
8935
8936
8938
8948
8950
8958
8968
8979
8983
8987
8988
8990
8984
8985
8992
9000
9016
9035
9038
9040
9044
9045
9041
9054
9053
9054
9055
9027
9028
9031
9037
9036
9035
9036
9029
9045
9044
9052
9053
9054
9071
9072
9073
9076
9083
9080
9081
9084
9089
9102
9105'''
'''alt_list = list(map(int, alt_str.splitlines()))
increased = 0
for i in range(1, len(alt_list)):
    if alt_list[i] > alt_list[i-1]:
        increased += 1
print(increased)'''
# day_1:2
'''
tmsw = {}
for i in range(len(alt_list)-2):
    tmsw[str(i)] = alt_list[i] + alt_list[i+1] + alt_list[i+2]
increased = 0
for i in range(1, len(list(tmsw.values()))):
    if list(tmsw.values())[i] > list(tmsw.values())[i-1]:
        increased += 1
print(increased)'''
# day_2:1
inst_str = '''forward 9
forward 9
forward 3
down 2
forward 8
down 8
forward 1
down 6
down 9
down 9
forward 1
up 5
up 4
up 8
down 6
down 7
forward 4
forward 6
forward 2
forward 2
forward 4
down 2
down 6
forward 6
forward 9
up 4
up 6
down 2
forward 7
up 7
down 8
down 4
down 6
forward 1
down 2
up 1
forward 8
down 9
forward 6
up 9
down 8
forward 5
forward 8
down 8
up 3
up 9
down 2
down 2
forward 5
up 7
forward 5
down 6
forward 4
down 2
up 2
up 7
up 1
down 4
down 8
forward 6
down 2
forward 7
down 1
forward 7
forward 1
up 1
down 4
down 3
down 4
down 4
up 8
down 1
up 7
forward 8
down 5
up 1
down 4
down 3
forward 4
up 7
forward 1
down 4
down 2
down 4
up 8
up 6
down 1
up 3
down 5
forward 4
down 3
forward 9
down 9
forward 2
down 4
up 3
down 4
forward 1
forward 7
forward 9
forward 7
forward 3
forward 6
down 4
forward 7
down 5
down 1
forward 7
up 1
down 8
down 7
down 7
down 7
down 3
forward 4
forward 6
forward 6
forward 1
down 7
down 6
down 8
up 5
down 7
up 6
forward 9
down 7
down 1
down 9
forward 8
up 5
down 6
forward 3
up 2
down 1
forward 2
down 3
up 6
forward 8
forward 1
forward 3
down 9
forward 1
down 3
up 7
forward 8
up 8
down 7
down 2
forward 3
up 7
forward 6
down 7
down 6
up 5
forward 9
down 7
up 5
forward 6
up 5
up 6
forward 6
down 8
down 1
forward 7
forward 6
down 5
down 6
forward 9
down 6
up 5
forward 9
forward 4
down 1
forward 5
down 4
forward 5
forward 1
down 1
forward 4
down 5
forward 4
up 8
down 1
forward 6
down 5
forward 8
forward 8
forward 5
down 7
down 4
forward 4
up 1
up 8
down 6
up 5
forward 6
forward 5
forward 9
down 3
down 5
forward 3
down 6
forward 6
up 7
up 6
down 6
down 1
forward 8
forward 9
up 5
forward 8
forward 9
forward 9
down 2
down 8
forward 8
down 2
up 8
down 2
down 2
up 1
down 5
down 6
down 1
down 8
down 9
forward 3
forward 2
down 6
up 8
forward 9
forward 7
forward 1
down 8
up 8
forward 8
down 5
down 3
up 3
forward 6
forward 5
down 4
forward 4
down 4
forward 5
forward 9
forward 2
forward 9
down 1
down 3
down 6
forward 6
down 7
forward 3
forward 4
forward 1
down 6
forward 1
forward 4
forward 2
forward 2
forward 1
forward 2
down 1
up 2
forward 1
down 3
forward 8
down 3
down 9
forward 5
down 3
down 3
forward 2
forward 9
down 9
forward 4
down 2
forward 5
up 8
down 4
forward 5
down 1
forward 9
down 1
forward 7
forward 2
down 2
down 6
up 3
forward 7
up 4
forward 7
forward 6
down 8
forward 2
down 3
forward 9
forward 4
forward 8
down 6
forward 8
down 9
down 2
down 3
forward 1
down 5
down 3
forward 2
forward 7
down 4
down 3
forward 9
down 2
forward 2
forward 1
up 6
up 4
down 5
forward 5
up 8
down 7
forward 6
down 5
forward 3
forward 3
forward 7
up 9
up 6
down 5
up 7
forward 2
forward 5
down 9
down 6
forward 7
down 9
up 2
up 5
forward 1
forward 8
forward 9
up 8
forward 9
forward 5
up 9
down 4
down 7
forward 2
forward 1
down 4
up 8
down 5
down 7
down 9
down 3
down 9
up 8
up 7
up 8
down 8
down 2
down 6
down 6
up 5
up 9
forward 1
down 8
up 4
up 3
forward 7
up 7
down 3
up 1
forward 3
down 7
forward 8
forward 2
down 6
down 2
up 7
up 5
forward 7
forward 1
forward 6
up 6
forward 5
down 2
up 4
forward 2
down 9
forward 6
forward 3
forward 3
forward 4
forward 2
down 6
forward 9
forward 7
down 4
up 1
forward 4
down 6
down 6
up 1
up 1
forward 3
down 5
up 5
down 3
down 6
up 8
down 2
up 6
up 1
forward 8
up 6
down 8
forward 9
forward 4
forward 9
down 7
down 9
down 6
down 1
forward 9
forward 9
down 6
down 5
up 6
down 9
up 4
up 5
forward 8
down 4
down 5
forward 8
forward 7
down 2
forward 2
forward 6
forward 7
down 1
down 7
down 1
down 6
forward 2
up 2
down 4
down 8
forward 1
down 1
down 3
down 3
up 9
down 9
forward 3
up 4
forward 1
down 9
down 8
down 9
forward 5
forward 4
up 3
down 8
forward 2
down 3
up 5
forward 4
down 7
down 8
down 9
forward 8
down 8
forward 4
down 6
down 3
forward 5
down 3
down 9
down 4
up 8
forward 4
up 6
down 3
forward 6
down 9
down 7
forward 7
forward 3
forward 2
forward 4
down 4
down 5
up 9
down 2
down 6
down 9
forward 7
forward 3
up 3
forward 3
down 4
down 7
forward 2
down 2
forward 3
down 8
down 7
down 7
forward 2
forward 2
up 6
forward 8
forward 9
up 3
forward 8
forward 5
forward 7
up 3
forward 3
forward 6
down 5
down 5
down 4
forward 1
forward 8
forward 4
forward 3
down 1
forward 8
down 4
up 5
forward 4
down 2
forward 7
down 2
forward 9
down 1
forward 6
forward 8
forward 6
forward 7
forward 1
forward 6
down 5
up 3
forward 7
down 6
forward 2
down 2
forward 8
forward 9
up 7
forward 1
forward 1
up 1
forward 1
down 2
forward 6
down 9
up 1
up 2
forward 6
forward 1
forward 7
down 1
up 8
forward 7
up 6
up 4
down 1
forward 2
down 4
down 1
down 7
down 4
up 3
forward 8
forward 3
forward 5
down 7
down 8
forward 5
forward 2
down 5
down 2
forward 2
up 9
down 3
down 5
up 7
down 4
down 2
down 7
forward 6
down 2
forward 1
up 4
forward 2
forward 2
down 5
down 1
down 1
forward 7
forward 6
down 7
down 5
up 1
up 3
forward 3
forward 9
forward 4
down 1
down 5
forward 3
forward 7
down 8
forward 8
forward 2
forward 7
up 7
down 7
down 4
down 2
up 6
up 1
forward 8
up 8
up 6
down 8
forward 1
down 5
forward 3
down 3
down 3
forward 1
up 3
up 3
forward 8
forward 8
down 8
forward 6
forward 2
down 7
forward 8
down 7
up 5
forward 7
down 1
forward 9
up 6
down 2
up 2
up 5
forward 6
forward 9
forward 3
down 8
forward 8
down 2
up 5
down 9
forward 5
down 6
down 3
down 9
up 8
up 3
down 2
forward 7
forward 4
forward 4
forward 8
up 6
up 4
forward 9
down 6
down 8
up 3
up 5
forward 8
forward 7
forward 4
down 8
forward 1
forward 5
down 9
forward 8
up 6
down 6
down 8
down 2
forward 4
forward 9
forward 2
forward 7
down 3
forward 3
up 6
down 4
forward 2
up 4
down 4
forward 4
forward 3
forward 1
up 6
forward 1
down 1
forward 7
up 4
forward 3
down 4
up 6
up 2
up 8
down 1
down 6
down 6
down 1
down 7
forward 8
down 9
forward 5
up 2
up 7
up 5
down 6
up 1
up 6
forward 4
down 7
forward 5
forward 1
down 6
forward 2
down 2
forward 9
down 9
up 6
forward 1
up 7
down 7
forward 1
down 6
up 1
forward 2
forward 1
down 4
forward 9
forward 7
forward 5
down 1
forward 2
down 2
down 2
down 5
forward 1
up 8
forward 9
down 7
forward 9
down 2
up 5
down 9
down 8
down 5
forward 8
forward 4
down 4
down 6
forward 1
down 5
up 6
down 3
down 3
forward 9
down 9
forward 6
down 5
up 6
down 5
up 7
forward 9
down 2
down 4
down 8
forward 4
up 7
forward 9
forward 7
up 5
down 7
down 5
down 1
forward 5
forward 4
down 2
up 3
forward 1
up 4
up 9
down 4
forward 3
down 4
down 9
forward 4
up 2
up 3
forward 7
up 6
down 8
down 8
forward 6
forward 2
forward 3
forward 9
forward 7
down 6
down 7
down 4
down 2
forward 8
down 6
forward 6
forward 6
forward 9
down 8
down 1
up 5
down 1
forward 9
down 1
up 8
forward 8
down 3
forward 1
down 9
forward 6
forward 4
forward 8
down 2
up 8
down 2
up 8
down 9
down 4
up 7
forward 7
forward 5
down 5
down 4
up 8
forward 1
down 7
forward 1
up 9
forward 9
forward 7
forward 9
down 9
forward 4
down 7
forward 6
forward 6
up 3
forward 2
down 5
up 8
down 1
up 8
down 4
down 1
up 6
forward 4
forward 3
forward 6
down 3
forward 4
forward 4
forward 4
down 8
forward 3
up 8
up 8
down 8
forward 6
forward 8
up 5
forward 6
down 8
down 7
up 4
forward 6
forward 9
down 9
forward 4
up 2
forward 1
up 3
down 9
down 8
forward 8
forward 8
forward 7
down 6
down 1
up 6
up 6
forward 9
forward 7
forward 7
down 3
down 6
down 9
down 4
forward 7
forward 3
forward 3
down 7
up 5
down 3
forward 6
forward 3
forward 5
up 3
down 7
forward 2
up 7
forward 9
down 3
down 9
forward 8
forward 5
up 7
up 2
up 8
forward 6
down 8
forward 2
forward 4
up 2
forward 2
forward 8
forward 4
down 8
forward 5
down 4
down 7
forward 3
down 3
up 1
down 9
forward 9
down 2
down 1
forward 1
down 6
down 3
forward 5
down 3
down 8
up 7
down 1
up 9
down 4
forward 9
down 4
forward 3
forward 6
down 3
forward 3
down 2
down 7
down 1
up 4
down 9
down 1
down 3
down 4
down 8
down 7
forward 4
down 4
down 9
forward 2
forward 7
forward 2
down 6
up 8
forward 6
down 2
forward 6
up 8
forward 6
down 9
forward 2
forward 6'''
'''
h = 0
d = 0
for i in inst_str.splitlines():
    if i.split()[0] == "forward":
        h += int(i.split()[1])
    if i.split()[0] == "down":
        d += int(i.split()[1])
    if i.split()[0] == "up":
        d -= int(i.split()[1])
print(h*d)'''
# day_2:2
'''h = 0
a = 0
d = 0
for i in inst_str.splitlines():
    if i.split()[0] == "forward":
        h += int(i.split()[1])
        d += a*int(i.split()[1])
    if i.split()[0] == "down":
        a += int(i.split()[1])
    if i.split()[0] == "up":
        a -= int(i.split()[1])
print(h*d)'''
# day_3:1
input_3 = '''110001101000
111011011100
100001101100
111011011010
001001101100
100001111100
110110101101
110010110000
111101010011
101101010110
000010101110
110110010001
011101010111
000101101011
010110011010
101110110000
111110101011
010001111110
010011111110
101010111001
110010010111
110001100101
111111100101
101001111010
111011111000
100011101000
011100111001
100000100110
001101000100
010110110100
011000111111
101011111000
011011110011
000110011101
001000001010
101111100000
011000111110
011110000001
101001110100
110000001110
010010110110
110001110011
001100000101
000001001101
111011011011
000101100111
010111100000
000110100010
001000110101
110000011100
101011000111
111001011110
001110011101
100110011000
000000001101
011011101101
110100010011
110101110011
111110101010
111010000001
111000101101
000011111111
000110100011
101100111011
100011111110
111000010000
010001011111
101011101001
110111110010
100111101100
101110111001
101100010000
101100000000
010010011111
101000101011
111000000000
001101101100
001010110100
101110010111
010011011111
001101101111
000110000010
101010011100
010011101010
001001011111
010011100100
011001010000
101101000110
000000010010
110101011000
000011001001
110111110110
010100000110
001010101100
001010100000
101001100110
011111011000
001111111101
001000010001
011000011001
100110110000
100110001100
110101101001
101100010111
100111001110
010000100101
111100101100
000000011001
110010101101
111001110100
011111100001
010011011011
100100100111
011010011000
100100110010
111111100000
111010111110
001001111101
101010110001
101100000011
011011110010
100010000101
110111010011
101001001111
000011000111
010110110001
100010001101
000011111110
100111110110
110100001110
000010000000
011010010101
000110011010
110111011101
110111001100
100100010100
100101101011
001001001001
101111001010
010010010100
010101000001
111011101100
011100111110
011111110010
001011001110
110101001110
000000000010
100111010000
000010001010
110110001111
001101110111
010010101010
011100001011
110111001010
001001011001
000000000100
110111001000
010101110011
110000011011
101111000000
001011010100
001010000100
111110101111
000011000100
100011110110
010011000010
000110001001
111110010110
100110011010
110010111101
001111011101
100001101111
110100000001
011110000000
011010001001
110110011111
100110001111
001001011100
010010100010
011100001100
011001001011
011111100010
101001100101
011100100110
101000010011
110010101010
000111111100
010000000101
111100011010
101100011010
011111000011
011000111101
111000011011
110101111101
001000100101
100100110101
000111101110
010000111011
001011011101
111011110101
100110000101
111101011111
011101000011
010010110101
000001011101
111110000100
010100011100
101000100011
101010000011
111011001011
010101010111
111111000111
001011110100
000000111010
110100001111
110100001001
011111000100
001101111101
001000110000
100011110100
111110010100
001100111110
010010001110
000100110101
111011100111
001000000110
100100100011
000011001101
000111001110
000101111101
011101110010
011110111111
000111000011
101001000101
101111111110
100101110100
101010100010
000010111010
001011101011
100100000111
011000010001
100000100101
001010001010
001100100001
001000010010
110101110001
100111010111
100101101001
100010101101
011101100101
011111101011
101101011010
101001111011
111010011101
010010001100
110001000010
101011101010
010001010011
101111111000
001110101000
111000000111
010111011100
101000100100
010011010111
011000100010
111001111101
101010010011
110011011000
100111010101
100001101110
011011110110
110000010111
001100101111
000110111111
111001011011
001010100100
011111100011
011110001110
011011111000
010101111101
100001100011
111111011111
100010111101
110101010100
101000111001
001001000001
110011110011
001101001000
001100101110
010001111100
101100111000
001011000011
110001011101
101001011010
110011110110
011010111101
001001100001
011010010100
010111101011
000110010101
110010100011
001111001101
100110111001
100010000110
010111011011
001110011110
011010111100
110100100010
001010001110
010011111010
101010100111
111010100101
010000000000
000001010101
111001000001
011110000010
001010111111
100101000001
001000010111
101000011011
011100010000
111000010100
010001011100
111111010001
011010101110
011111110001
000110101100
111000011001
001010011100
000011011100
110111111101
001001010101
011110000011
001111111001
110010100000
101111010100
100100011000
010101000111
111100110111
010010111011
001101011111
011101011000
111111111111
010100110110
111000001010
000100000110
000110010000
110000011000
001000011001
011110000100
101011100011
000011100001
110100000011
100100011100
011110010111
101000111111
001010001100
100010000100
011100110110
101010011000
100000001111
010001111111
101101001011
100010100101
011011100000
111110100111
000100011000
011000100001
110000111000
010011100101
000100010011
101110101011
011111001111
010001001101
111100011111
010000100000
001111000101
100000010010
000111101000
101111010000
110110010000
110111110001
111110100000
101110001010
011111011001
000001111101
101000010100
110111101010
001111111011
000101010101
110110001011
100011001010
101010010111
111100011110
010000101101
111110000010
000100100111
000110001100
011110000111
101110100001
110001101010
110100010100
111010101101
110010001001
000010011110
001100100110
011111010011
111110000001
110111111100
011100000110
000011100111
001101110100
100111011101
011100010010
011001110110
110110010010
011000011011
110111101100
101100101100
100101111001
101001111000
101000101001
011101010100
001110000100
011100100000
110000001010
010001000111
001100000110
000100111011
101001011101
011100011110
001011001000
111101101100
001110011111
100011100110
011000100101
111010111111
111010001110
111011101111
010001110011
000011010100
000000101001
010100100001
101111111011
100111100000
111110100101
000100001000
000101011101
110001001110
110111001001
110111110011
111101000111
010111000100
000010101000
000110101101
100000001010
010111100101
110010000100
000011010111
000101001001
100111101110
111110011111
011001000010
110010001101
001111110010
101110111111
100100111101
010111100110
000101110001
010111000001
001011101010
101101100110
110010111111
001111101010
110110100100
101110100101
011001110010
000000100011
110000111100
011110001011
001110011000
000010011011
011100011100
110001001010
100000111010
010010000111
010010000001
001110100100
111110111101
001100001011
110101000000
111100010110
100010011100
001011110011
100000111001
000101000111
100011101011
011010001000
111111111001
100011011001
101001010011
110001111001
001100101101
111000111100
101000110110
000011110011
000110010001
110110010011
011100000000
101101110001
100001111101
110010010000
100001011011
100010010000
000000000110
001011001101
000001000101
011100100010
000100010001
001111001110
100001101001
010100011111
000001111011
110100111110
101000101000
000101100101
011000001101
001010101000
100100100110
101010111101
010000111100
000000010000
101011110100
111011111010
000011011111
011111000010
001001001110
001100010111
011001110100
101011000110
001000011101
111101000010
011101001001
100011101110
110000100101
011111101100
101000001001
011011001110
001100011110
010110100001
011100001000
001111011010
110001100100
000001100011
101011110001
100000010111
010011001000
101111101110
110001011100
110000001011
010001100000
100111000111
110000000100
000011010010
000101111001
000100101000
111000111111
011110100111
111110010010
111111000010
011111110111
101101000100
110101001111
011000000101
011010100110
100101101000
011001111000
010001110101
011011110111
101110110100
100011100101
000101100000
100101011011
010011000110
000110110111
011110010010
101111001111
101001110111
100001011001
101101001111
011111110101
110001111111
010111001011
100100001010
000100101111
110111110111
001101010100
001011111100
100110111101
000001001001
100111111101
011010101101
100010100001
110101111110
010010011100
111001111000
101011100001
011101111110
110101101011
011100101100
110110000001
010110110110
101011010111
110111011011
010011101001
000001101010
000010111000
101000101010
111100001000
001001001100
010110000010
010010101111
101101011111
111111010011
111111011101
100011010000
001011100111
011001011110
110010001110
001010010100
000010000010
100011100001
011011100110
100001001111
111000101010
111000110100
110100011011
111010010101
010010011001
010111101111
001111001100
000111010011
010010010001
011101001100
011111011110
000101101010
001011110111
010000100011
111101110001
110001110010
011000010101
111111000110
100110110101
010001000110
010000001111
100000000110
100101101110
010101111111
111000011010
011000000100
010100011110
001101111111
111011000100
011011101100
011001100011
010001000010
011001000111
001010000101
111001011001
110100111101
100101011010
011100010101
100000000010
110101101110
110011011011
100010111000
010110000100
100000011000
011001011100
010011001110
001100010101
111100000000
001000110001
000011010101
110101000010
001100101001
100110011100
100001101011
111010011011
011010110010
010101000000
000111011111
111110110101
101010110101
111011100100
010111111111
101010101111
000011110010
100101001010
101000001100
000000101100
011111010001
110101001010
101010101110
000101000100
000110101001
010011011110
111101101111
110100111000
011011000111
010000001000
110000000110
010100101111
010110001001
000111101111
101110110001
101000101110
011101100001
010001010110
010011111111
011111111101
010111001010
010010011011
000010010001
101100000010
011001101001
011100011011
011010011100
111101110101
001001001011
011110011101
100001010100
010010111110
010011111101
110000101001
101110000101
110010001100
011001110111
010011000000
000011100101
101010101100
001000111000
110101000001
111110001000
110000011001
100000111000
010111110001
011011000001
101101100100
111110111011
101000000101
011110110110
011001100111
100101001011
001110110100
011010100101
011110010001
110010101110
111101001111
100100000100
100000110001
100100110011
110011101000
000110101011
011110010101
010101010000
111111011110
101111111111
001111000010
100001111001
011110010000
100101001101
111010001100
001101010010
100100111110
011011100001
110010101001
010101101101
101000100101
001100101011
111111001010
001000001011
011101100111
100101000010
111011011110
001000000101
001000000000
000101010110
001010111011
110010000000
010011100001
001001011011
000101000101
010011000111
100100101101
011110010110
100100010000
101100100010
110101011011
000001111111
101001110010
000100101011
110001000000
011010111011
001111101110
100110111111
011100000100
111100010101
100001111111
100000110000
101111110000
100000110101
001101101010
101010011110
011000110010
001110110110
101000110010
000111001111
011101111001
010000110010
101011000000
001011001010
001101111100
010010111001
010101100010
011001100000
011110110011
010101011100
011000100011
001110101010
100111110001
101110110111
110100110101
101000110111
100011110111
010000010010
001001111111
010100111110
101111111101
110111101111
011010110101
101100111001
110001111010
000101110010
110000010110
010110100011
111011111111
001100011010
011010000010
000101011000
101000001000
011110110101
000001001011
010011110001
110101100000
101011000001
101001000010
111111100111
011010010010
100010001100
111011011101
010110001111
001001010011
111001001111
101000010101
110101101111
011111111001
111001101010
100111011010
001010010011
110001110100
011110001010
110111010101
001001100110
001001110011
100001110011
001001001101
100110100100
010001101101
101110000111
001110001111
010100111100
010110011111
100100000011
100110011001
011101111011
011000010000
010101101001
100010110011
000100000010
111001001000
001110100000
110000111011
000001100111
000110110000
111001110000
100001011100
101101001101
111101110011
100011011100
011010110111
111001110001
101011111100
110010110110
011100111010
100111110101
010011010010
011101110111
101110010100
011100100001
001011100011
110101010001
101000000111
000101100100
100011000011
111011001101
101001100111
000000000111
010100110011
011111001101
111101110000
000111111000
110100101011
100101110001
001010100011
110101100001
100101010110
011100111011
100100111001
000100110001
001101011100
000110100110
010001001111
110000000000
001010101101
100001100001
110010100111
000010011111
101110011001
110010010101
010101011101
010001110010
011101011111
100100001011
001100011100
100111101001
110010011001
001010000011
101010100000
111111111110
011010101001
011110100010
110000111101
111010100001
100111100110
000000011010
011011001100
001101111011
011111111010
000101110111
101100011011
100111110000
111011010100
000100001001
010000110000
010111110000
000110011001
101111001110
001100010000
011011011011
001001001000
110110111011
001000010100
010100010000
010101110111
001111010100
001010000010
011110011001
100001001001
001101000101
010001010101
101110001001
011100100111
111000001111
101001111111
101010001011
111110110011
101101101000
011001111010
000010011001
100000010001
101010011111
000100011101
010010100000
000001100101
001001011110
100101000101
011111110110
111101111001
100011101100'''
'''inp_list = input_3.splitlines()
d = {i: dict(collections.Counter([int(f[i]) for f in inp_list])) for i in range(12)}
for i in d:
    if d[i][0] > d[i][1]:
        d[i] = 0
    else:
        d[i] = 1
c = "".join(list(map(str, d.values())))
d = ""
for i in c:
    if i == "0":
        d += "1"
    else:
        d += "0"
print(int(c, 2)*int(d, 2))'''
# day_3:2
'''c = dict(collections.Counter([int(f[0]) for f in inp_list]))
print(c)
if c[0] > c[1]:
    c = 0
else:
    c = 1
for x in range(1, 12):
    inp_list_copy = inp_list.copy()
    for f in inp_list_copy:
        if f[x - 1] != str(c):
            inp_list.remove(f)
    n = dict(collections.Counter([int(f[x]) for f in inp_list]))
    print(x, n, inp_list)
    if n[0] > n[1]:
        c = 0
    else:
        c = 1
o2 = int(max(inp_list), 2)
co2 = int("111001000001", 2)
print(o2, co2, o2*co2)'''
# day_4
input_4_2 = '''50 98 65 14 47
 0 22  3 83 46
87 93 81 84 58
40 35 28 74 48
45 99 59 37 64

85 66 90 32 88
95  6  4 74 27
 1 10 70 41 92
54 36 42  9 39
60 99 31 67 16

 4 44 66 10 58
33 64 93 42 46
19 63  6 83 54
60 51 76  8 30
71 49 73  7 55

17 67 52 61 98
46  5  4 51 76
73 59 74  8 33
48 96 20 26 15
55 19 86 29 43

20 75 12 67 41
89 36 65 66 92
40 19  1  0 28
99 61 85 58 50
44 72 57 35 86

69 87 27 59 33
47 34 60 93  9
71 84 46 24 96
15 91  5 61 19
57 78 55 31  8

19 10  1 81 96
27 71  2 52 56
15 22 48 82 34
64 47 42 49 51
26 72 61 12 57

71 94 40 34 26
12 80 57 38 55
 4 56 11 73 49
75 60 61  9 50
91 70 23  1 90

39 86 30 73 38
 6 53 58 14 36
85 12 75 88  5
 0 29 41 21 15
47 66 59 54  1

99 97 50 17 60
36 13 29 80 32
49 85 75 71 15
10 79 41 61 66
68 57 55 74 98

68 33 87 89 59
96 35 76 78 55
 4 63 51 10 65
58 38 22 54  9
66 18 37 60  6

43 86 50 23 77
10 42 19 61  2
40 29 20 84  0
70 59 96 80 57
76 12 39 36  6

73 43 92 37 99
36 42 10 77 87
 3 57  4 20 35
18  7 46 91 11
17 98  8 53 61

22 37 89 51  9
71  6 72 87 32
13 79 86 53 98
16  2 93 48 38
63 82 66 61 69

73 90 85 54 65
 9 66 28  5 63
91 50 70 59 80
95 68 92 72 67
69 88 36 43 53

36 81 66 78 90
 2 25 94 82 55
34 45  1 14 37
13  4 70 48 75
67 73 32 18 91

33 93 71 48 47
 8 79 69 53 82
 5 31 80 45 37
67 77 41 56 97
65 46 62 42 81

67 70 59 24 88
84 11 29 52 78
 4 39 12 90  2
44  3 10 75 89
30 93 22 14  8

79 60 98 99 49
23 26 86 91 38
77 45 95 66 75
81 42 85 21  3
40 37 65 20 50

12 54  0 86 52
15 56 29 39 94
66 79 14 65 26
 3  4 59 60 40
47 48 19 13 85

32 44 69 90 21
35  8  1 59 56
72 71 84 18 11
96 38 23 37 79
92 20 33 94 17

 1 94 42 21 82
92 60  9 32 38
71  3 37 77 18
89 16 74 76  2
83 30 28 11 70

94  3  1 71 87
 6 66 19 76 28
10 86 22 62  2
67  0 31 46 27
 8 33 43 92 29

35 90  8 30 27
67 60 82 68  1
 5 29 93 44 34
56 65 48 37 51
57 45 63 94 77

67 80 45 57 43
37 81 25 84 82
50  8  9 64  7
29 18 52 16 14
73 28 11 76  6

 5 76 67 18 16
68 47 15 29 59
46 32 40  9 84
30 17 20 22  3
35 80 38 72 88

35 44 14 89 72
75 67 56  2  3
58 41 49 12 52
92  9 22 34 88
65 39 93 61 47

38 67 33 18 60
34 50 69 31 83
29 30  9 12 95
79  2 24 54 87
46 68 48 58 42

61 87 46 26 34
74 85  9 54 38
50 29 84 40  4
49 39 33 99 53
77 59  0 42 35

86 68 23 62  5
96 92  7  4  1
50 70 12 83 46
34 63 91 56 11
76 90 71 88 95

19 18 13  3 62
42 29 57 79 85
39 64 14 28 98
99 36 91  9 63
69 66  2 17 31

51 43 49 98 94
31 64 53 54 57
 3 28 10 12  2
24 99 95 35 17
76 27 48  0 41

80 62 13 38 98
32 15 16  8 96
93 43 81 99 40
20 57 37 24  3
94 17 70 14  7

52 71 49 95 84
76 38 45 59 89
 1  7 27  0 98
92 64  8 50 68
13 91 26 51  2

31 45 25  1  5
50 68 77 61 53
74 20 99 38 63
76 44 15 42 51
67 87 86 12 24

49  0 70 82  9
 2 24 96 74 60
68 16 40 32 20
48  6 98 11 65
94 10 54  8 95

74 41 11 33 76
 2 10 44 89 23
56 45 78 60 34
15  5 26 83 71
20 72 85 75 54

15 59 93 53  8
 4 10 84 44 36
17 62 24 27 98
87 54 73 13 35
 9 48 52 33  7

56 80 70 74 35
53 69 75 25 27
47 91 85 62 32
93 26 89 18 52
16 73 49 55 77

42 40 54 67 73
11 10 49 35 59
12 93 37 15 69
97 41 47 39  2
75 99 21 29 26

23 75 41 10 86
71 67 66 38 99
91 92 63 40 28
69 97 42 77 60
44 53 12 84 57

72 51 31 90 37
35 89 55 73 87
46 32 45  0 58
50 81 13 18 66
38  4 40 62 22

14 48 35 76 83
13 70 26  4  1
30 22 91 93 29
69 41 74 40 63
80 65 66 72 23

23 65 33 56 38
84 41 34 21  2
 4 78 27 17 11
22 53 52 32 80
24 25 42 91 99

54 51  0 23 52
92 69 10 46  7
20 35 12 37 73
19 56 26 79 32
27 74 34  5 57

75 10 24 32  7
96 54 22 78  5
23 69 65 43 20
29 85 44 92 71
41 87 73  0 48

54 92 16 36 37
42 59  4  9 44
52 14 12  6 47
57 38 70 82  0
53 81 32 35  3

17 22 62 80 30
 8 28 15 42 46
79 64 32 29 75
 5  0  9 90 69
41 71 85  1  6

68 89 40 31 39
32 48 64 38 28
80 98 88 14 97
 6 60 52 11 55
95 34 63 81  4

80 33 14 83 68
78 69 81 59 15
72  0 74 21 75
49  6 67 73 64
 8 25 87  3 45

34 97 86  1 79
49 12 63 10 59
88 30 84 74 87
67 47 26  0 57
71 40  2 76 98

15 89 23 65 44
27 87 54 38 12
43 29 18 39 94
48  0  7 57 61
70 28 60 68 50

13 34 49 67 40
88 74 99 20 26
63 69 62 24 32
35 45 96 79  1
92  7 17 76 30

95 21 75 46 74
39  7 58 23 90
61 64 37 81 82
92 36 54  9 53
17 51 33 10 27

67 35 44 22 23
28 96  1 56 29
 0 12  5 50 99
70 42  8 24 25
39 53 51 89 85

50 15 94 84 27
72 26 51  3 85
63 45  1 64 44
17 80 13 88  2
12 97 91 25 18

59 14  9 67 63
 6 18 26 98 50
86 74 75 56 34
48  7 99 20 64
 8 53 10 15 57

 6 35 13 68 24
90 19 91 71 86
95 58 10 44 98
 8 41 60  1 16
29 59 43 84 48

48 56  8 74  4
66 30 77 35 90
94  0 75 49 84
 5 39 11 54 87
33 58 96 22  2

 5 38 57 63 65
74 58 22  8 81
45 96 78  3 11
28 42 30 39 51
87 33 34 75 14

56 34 67 70 17
 7 80 10 31 85
68 59 63 74 40
13 81 99 62  6
92 84 71 37 39

85 99 74 16 10
12 21 91  2 83
 4 94 38 51 36
41 97 45 65 24
50 82 92 52 35

28 65  6 13 23
 7 57 86 18 67
26 85 29 22 89
99 62 94 31 96
14 17 50 56  9

98 10 63  4  8
46 21 58 89  3
27 12 11 55 16
61 38 43 33 54
53 14 99 31 25

25 70 24 40 14
75 82 58 68 41
22 71 72 93  1
47 97  6 81 45
92 42  2 76 12

31 84 30  0 85
55 70 72 45 57
78 52 67 60 22
43 32  8 44 34
14 64 91 89 18

70 19 62 16 56
84 49 41  3 20
85  5 76 95 22
63 55 37 31 72
42 17 28 65  1

85 17 57 62 48
34 29 69 52 28
90 64 54 21 38
 0 50 84 44 60
93 80 75 89 83

39 84 78 12  5
29  4 35  7 85
73 25 58 27 45
22 90 91 47 74
60 96 15 24 26

13 30 82 31 43
23 71  1 51 36
40 62 25 54 86
 8 83  2 47 34
33 41 27 98 24

13 25 53 50 56
77  4 41 19 22
68 70 75  9 65
30 33 60 74 80
31 83 34 79 11

11 90 38 78 73
17 16 14 37  4
80 68 21 70 92
47 26 81 67 25
10 31 23 41 22

90 62  2 50 79
77 51  8 11 13
32 29 43 88 33
39 34 89 45 23
91  9  6 68  3

62 70 89 27 87
45 65 96 80 29
 1 54 90 68 16
72 50 28 95 12
21 71 81 10 60

33 14 60 44 78
 6 65 87 11  8
79 21 59 35 19
26 69 67 42 27
25 36 80 10 45

71 24 80 87 56
 7 61 43 38 18
52 46 41 28 48
 0 74 20 34 63
 3 84 42 85  9

36 64 41  7 49
91 92 13 94 88
73 98 79  0 12
76 66 86 67  9
 2 85 74  5 34

 8 81  7 56 28
36 13 42 29 75
12 27 85 45  9
26 25 62 41 22
79 11 95  0 24

72 76 81 67 16
96 41 94 58  7
 0 79 38 27 11
61 36 56 88 39
89 63 31 75  8

62 51  5 46 28
77 97 89 86 13
87 55 73 90 57
84 44 40 49 34
25  0 58  6 21

 7 56 15 41 94
42 89 16 18 74
57 79 96 35  3
14 45 20 19 80
87 85 28 69 17

27 88 54 62 65
44 93 69 13  9
85 63 43 11 47
83 57 30 20 56
71 46 49  7 77

45 24 75 39 69
48 74 44 49 64
65 25 22 46 93
88 52 27 37 50
19 35 47 54 67

44 32 71 13 57
 7 38 26 98 65
46  1 21  8 55
30 62 92 27  3
69 50 99 85 11

86  6 64 34 97
47 98  7 38  9
26 68 75 92 54
58 42 13 78 37
85 28 81 16 51

82 74 15  4 86
55  0 70 88 24
50 79 63 40 21
47 39 61 49 36
89 16 13  2 37

89 19  9 82 13
84 34 58 56 10
27 92 46  4 94
44 24 52 86 55
39 23 22 99  5

65 92  8 86 77
98 79 72 28 78
16 23  3 55 48
68 95 66 30 43
50 31 15 11 45

32 70 25 59 31
47 68 77 56 23
66 78 54 88 50
55 60 58 89 83
84 99 86 97 95

53 46  1 94 87
 8 80 38 77 81
17 51 47 19 69
86 50 71  5 93
61 66 36 58  0

90 58 17 29 92
67  1  8 64 99
63 22 57 19 68
78 36 93 53  2
27 48 62 39 14

 8 49 22 90 54
26  4 99 27 34
78 25 11 85 28
31 42 36 53 15
64 75 60 45 35

99 84 26 53 90
61 51 98 39 86
47 37 52 80 63
67 49 35 70 11
32 45 94 73 43

91 92 74 94 32
27 56 50 33 54
67 46 35 25 10
93 97 30 90  4
57 15 69 83 39

71 68 74 81 11
44 98 60 17 73
43 40 32 38 39
61 56 97 94 70
23  2 86 91 54

19 98 93 42 88
 0 16 30 32 71
89 86 81 76 68
29  2 14 72 63
 7 27 67 59  1

24 18 28 98 95
10 62 80 71 36
 3 89 20 63 46
47 65 84 22  6
82 19 81 38 45

54 85 67 34 79
25 58 38 73 61
72 98  4 19 40
32 10 29 31 89
15 33  5  7 63

49 48 71 81 88
70  5 39 41 22
19 20  7 75 23
69 46 63 14 54
80 45 94  6 55

88 62 76 78 95
64 65 36 58 22
 7 21 98 93 42
79 99  9 89 10
 6  5 33 92 72'''
'''
input_4_1 = [23, 30, 70, 61, 79, 49, 19, 37, 64, 48, 72, 34, 69, 53, 15, 74, 89, 38, 46, 36, 28, 32, 45, 2, 39, 58, 11,
             62, 97, 40, 14, 87, 96, 94, 91, 92, 80, 99, 6, 31, 57, 98, 65, 10, 33, 63, 42, 17, 47, 66, 26, 22, 73, 27,
             7, 0, 55, 8, 56, 29, 86, 25, 4, 12, 51, 60, 35, 50, 5, 75, 95, 44, 16, 93, 21, 3, 24, 52, 77, 76, 43, 41,
             9, 84, 67, 71, 83, 88, 59, 68, 85, 82, 1, 18, 13, 78, 20, 90, 81, 54]
input_4_list = [[list(map(int, x.split())) for x in i.splitlines()] for i in input_4_2.split("\n\n")]
def check_bingo(l):
    for i in l:
        if i == ["-", "-", "-", "-", "-"]:
            return True
    for i in range(5):
        d = []
        for x in l:
            d.append(x[i])
        if d == ["-", "-", "-", "-", "-"]:
            return True
    return False
win_order = {}
for i in input_4_1:
    for x1 in input_4_list:
        for x2 in x1:
            for x3 in range(len(x2)):
                if x2[x3] == i:
                    x2[x3] = "-"
        if check_bingo(x1):
            ok = 0
            for foo in x1:
                for too in foo:
                    if type(too) == int:
                        ok += too
            if input_4_list.index(x1) not in win_order:
                win_order[input_4_list.index(x1)] = [ok, i, ok*i]
print(win_order) 
# win_order[0] = ans day_4:1
# win_order[-1] = ans day_4:2'''
# day_5:1
input_5 = '''419,207 -> 419,109
300,888 -> 803,385
104,959 -> 457,959
987,951 -> 987,385
173,602 -> 919,602
173,70 -> 305,70
341,19 -> 486,19
128,579 -> 128,100
210,867 -> 969,867
880,493 -> 880,58
937,831 -> 131,25
520,921 -> 476,965
760,147 -> 461,147
646,108 -> 646,27
99,906 -> 99,591
19,956 -> 19,273
89,201 -> 326,201
275,948 -> 962,261
292,489 -> 689,489
674,109 -> 20,763
861,861 -> 529,529
155,200 -> 273,200
628,803 -> 209,384
654,401 -> 578,325
723,625 -> 828,730
137,406 -> 862,406
893,45 -> 41,897
631,10 -> 941,320
618,435 -> 537,435
939,29 -> 30,938
505,796 -> 505,244
799,779 -> 77,779
938,576 -> 427,576
522,635 -> 405,518
244,89 -> 946,89
447,791 -> 316,660
560,731 -> 687,731
16,878 -> 835,59
45,707 -> 45,565
767,166 -> 404,529
791,260 -> 791,950
373,949 -> 373,156
38,774 -> 38,557
445,537 -> 445,370
817,756 -> 959,898
472,551 -> 952,71
696,381 -> 657,420
43,829 -> 43,190
101,635 -> 728,635
197,532 -> 140,532
693,368 -> 299,368
433,140 -> 433,610
136,58 -> 136,666
472,294 -> 886,294
690,883 -> 671,864
141,598 -> 141,118
56,651 -> 56,957
747,82 -> 747,91
219,455 -> 55,291
444,131 -> 444,802
326,459 -> 528,661
245,965 -> 143,965
916,316 -> 630,316
263,55 -> 977,769
262,451 -> 587,451
960,178 -> 960,564
960,88 -> 476,572
314,259 -> 314,169
404,742 -> 429,742
830,921 -> 409,921
181,396 -> 463,678
338,293 -> 23,608
851,667 -> 851,350
181,859 -> 718,322
314,240 -> 870,796
778,984 -> 77,283
476,178 -> 440,178
935,357 -> 841,263
695,683 -> 414,964
760,241 -> 306,241
390,355 -> 791,355
460,710 -> 851,710
559,448 -> 870,448
161,526 -> 301,386
935,495 -> 633,193
205,536 -> 383,536
290,626 -> 290,94
55,972 -> 946,81
240,531 -> 631,922
189,806 -> 573,806
518,827 -> 866,479
239,829 -> 260,829
151,51 -> 849,51
301,736 -> 532,736
23,889 -> 336,889
284,124 -> 284,933
637,610 -> 67,40
610,828 -> 610,159
763,590 -> 763,963
804,576 -> 804,694
689,872 -> 82,265
440,377 -> 190,127
933,330 -> 310,953
873,99 -> 873,328
756,808 -> 860,808
119,64 -> 928,873
74,144 -> 489,559
957,938 -> 838,938
148,320 -> 932,320
386,171 -> 386,985
357,171 -> 494,171
254,67 -> 254,95
196,910 -> 827,910
107,114 -> 758,114
971,40 -> 801,40
504,602 -> 215,891
184,310 -> 720,846
280,300 -> 955,975
49,637 -> 49,572
352,512 -> 739,899
610,123 -> 585,123
808,881 -> 758,881
646,980 -> 818,980
948,482 -> 384,482
115,144 -> 852,881
506,836 -> 547,836
985,369 -> 374,980
883,975 -> 48,975
447,664 -> 312,799
24,597 -> 24,331
45,19 -> 979,953
210,689 -> 210,430
704,806 -> 704,612
985,982 -> 124,121
70,174 -> 550,174
463,12 -> 637,12
107,97 -> 716,97
935,265 -> 390,810
42,223 -> 42,86
60,245 -> 60,473
695,735 -> 208,735
547,265 -> 802,265
941,667 -> 941,806
250,286 -> 611,286
10,64 -> 630,64
482,889 -> 482,150
441,820 -> 776,820
529,474 -> 529,265
533,465 -> 217,149
242,473 -> 242,830
633,160 -> 476,317
942,24 -> 942,784
80,313 -> 92,325
295,109 -> 295,712
31,964 -> 857,138
285,255 -> 955,925
650,610 -> 650,366
722,586 -> 625,586
580,384 -> 580,531
78,407 -> 896,407
296,310 -> 730,744
717,966 -> 924,966
524,551 -> 524,671
44,127 -> 784,867
214,849 -> 238,849
749,320 -> 749,241
886,146 -> 336,696
889,933 -> 455,499
644,232 -> 79,797
400,979 -> 626,979
433,681 -> 433,523
447,57 -> 676,57
185,416 -> 659,890
849,645 -> 257,53
633,721 -> 633,901
766,355 -> 766,56
669,393 -> 669,523
833,336 -> 833,58
52,114 -> 52,413
699,957 -> 109,957
14,953 -> 945,22
641,15 -> 929,303
25,874 -> 866,33
856,73 -> 28,901
94,892 -> 592,892
256,357 -> 256,700
960,579 -> 31,579
940,859 -> 940,987
507,673 -> 820,986
164,361 -> 133,361
210,424 -> 876,424
28,186 -> 28,376
452,149 -> 531,149
142,160 -> 142,435
180,801 -> 180,439
681,267 -> 42,267
724,414 -> 786,476
762,492 -> 762,427
902,808 -> 227,133
70,923 -> 821,172
468,12 -> 457,12
208,129 -> 986,907
78,786 -> 78,352
573,869 -> 820,869
780,680 -> 520,940
276,66 -> 276,244
423,629 -> 592,629
888,507 -> 888,139
869,878 -> 869,951
274,614 -> 625,965
926,289 -> 982,233
102,687 -> 102,214
52,264 -> 52,12
904,43 -> 657,43
184,685 -> 184,628
506,912 -> 601,817
356,524 -> 87,524
202,260 -> 202,276
970,63 -> 83,950
402,332 -> 950,880
195,666 -> 843,666
13,82 -> 892,961
614,28 -> 614,871
892,162 -> 892,101
363,665 -> 59,665
768,208 -> 410,208
483,300 -> 295,300
590,108 -> 881,108
837,967 -> 837,326
368,731 -> 368,913
900,921 -> 873,921
896,931 -> 848,979
562,939 -> 857,939
85,351 -> 598,351
917,30 -> 624,30
605,314 -> 605,303
382,655 -> 340,697
949,115 -> 653,115
667,311 -> 370,608
971,983 -> 39,51
178,687 -> 178,69
906,197 -> 296,807
947,886 -> 383,322
551,667 -> 551,238
86,65 -> 916,895
589,887 -> 865,611
332,53 -> 84,53
361,148 -> 55,148
883,205 -> 661,205
415,552 -> 52,552
46,42 -> 46,952
955,13 -> 39,929
677,482 -> 208,482
414,268 -> 927,268
101,509 -> 101,149
946,971 -> 139,164
223,597 -> 223,517
805,896 -> 796,896
565,875 -> 878,875
472,431 -> 472,732
643,15 -> 643,202
618,725 -> 618,284
376,532 -> 376,120
807,981 -> 415,981
716,401 -> 61,401
893,955 -> 743,805
264,935 -> 264,677
586,908 -> 638,908
780,277 -> 780,418
234,410 -> 428,410
899,214 -> 899,703
948,51 -> 948,509
238,664 -> 879,23
20,877 -> 638,877
146,738 -> 109,738
670,893 -> 524,893
317,423 -> 27,713
91,600 -> 477,986
902,63 -> 902,797
647,839 -> 647,667
227,358 -> 236,349
985,541 -> 660,866
86,562 -> 86,949
368,851 -> 863,356
327,905 -> 57,635
561,275 -> 781,495
196,65 -> 626,65
110,688 -> 720,78
720,472 -> 115,472
817,135 -> 817,876
752,387 -> 752,104
78,127 -> 635,684
812,170 -> 155,170
606,718 -> 804,916
843,494 -> 979,494
919,346 -> 454,346
866,828 -> 818,828
114,115 -> 114,250
895,308 -> 370,308
665,893 -> 690,893
939,275 -> 741,275
290,321 -> 290,910
747,327 -> 107,967
734,715 -> 391,372
368,497 -> 506,359
773,945 -> 391,563
772,537 -> 733,537
271,679 -> 488,679
665,745 -> 665,984
143,177 -> 685,719
671,860 -> 147,860
674,365 -> 857,182
343,74 -> 985,716
284,46 -> 180,46
595,800 -> 20,225
57,278 -> 792,278
649,285 -> 165,769
600,24 -> 600,116
862,939 -> 862,871
153,917 -> 682,388
117,884 -> 257,884
726,763 -> 531,763
810,985 -> 899,985
718,942 -> 718,466
674,19 -> 674,203
117,677 -> 117,918
928,261 -> 928,945
719,390 -> 719,321
822,601 -> 484,263
725,793 -> 725,111
201,745 -> 588,745
404,889 -> 908,385
981,39 -> 610,410
148,426 -> 711,989
128,260 -> 319,451
325,306 -> 325,585
557,415 -> 557,745
915,101 -> 648,101
104,636 -> 104,520
93,964 -> 641,416
201,709 -> 201,90
921,571 -> 798,571
313,624 -> 313,510
343,649 -> 28,649
688,246 -> 24,910
696,610 -> 353,610
126,310 -> 126,394
457,98 -> 457,981
277,707 -> 277,531
943,721 -> 37,721
959,295 -> 702,295
23,547 -> 891,547
209,114 -> 931,836
737,174 -> 737,195
208,890 -> 115,797
170,401 -> 726,401
11,218 -> 11,297
989,10 -> 10,989
866,86 -> 487,86
867,31 -> 867,334
846,414 -> 861,414
478,315 -> 478,697
572,843 -> 731,843
657,12 -> 161,508
903,194 -> 142,955
612,321 -> 147,786
813,920 -> 259,920
834,389 -> 651,206
824,153 -> 824,557
399,871 -> 115,871
270,785 -> 270,120
469,640 -> 753,640
620,132 -> 620,175
620,234 -> 666,234
594,409 -> 948,55
670,323 -> 670,89
262,65 -> 262,379
879,617 -> 284,22
493,423 -> 761,423
17,931 -> 906,42
512,494 -> 473,494
122,230 -> 122,87
15,207 -> 533,207
216,183 -> 50,183
360,107 -> 280,107
403,841 -> 941,841
913,442 -> 500,29
864,947 -> 864,85
500,516 -> 634,382
283,20 -> 669,20
916,770 -> 176,30
966,73 -> 252,787
847,841 -> 171,165
163,219 -> 766,219
482,515 -> 275,308
528,949 -> 240,949
725,574 -> 847,696
109,131 -> 109,538
655,837 -> 476,837
803,631 -> 803,51
977,83 -> 149,911
207,231 -> 171,231
617,29 -> 617,294
838,708 -> 446,708
711,597 -> 612,498
975,942 -> 279,246
315,128 -> 315,293
146,962 -> 873,235
448,180 -> 54,180
177,680 -> 866,680
891,265 -> 741,265
656,949 -> 414,949
909,456 -> 196,456
574,286 -> 58,286
861,691 -> 861,383
779,351 -> 779,827
459,989 -> 459,350
936,480 -> 936,699
645,309 -> 348,606
861,62 -> 621,302
568,324 -> 568,358
889,221 -> 889,335
538,759 -> 538,266
780,736 -> 780,827
866,518 -> 983,401
67,871 -> 840,98
432,664 -> 664,664
146,24 -> 755,24
964,585 -> 964,770
372,144 -> 809,144
688,827 -> 867,827
137,916 -> 137,942
846,131 -> 846,46
764,21 -> 457,328
140,66 -> 799,725
703,224 -> 83,844
557,67 -> 557,681
355,544 -> 764,135
625,893 -> 126,394
842,214 -> 842,322
582,778 -> 582,762
341,861 -> 341,859
143,767 -> 52,858
114,109 -> 114,200
394,210 -> 396,212
861,353 -> 861,652
873,553 -> 62,553
44,962 -> 984,22
734,56 -> 734,828
798,516 -> 950,516
367,755 -> 367,618
868,637 -> 868,780
192,952 -> 192,734
603,109 -> 705,211
12,17 -> 984,989
910,147 -> 910,620
515,749 -> 515,517
775,136 -> 761,150
662,636 -> 662,21
894,490 -> 310,490
956,732 -> 297,73
514,99 -> 140,99
308,419 -> 691,419
485,86 -> 485,187
737,783 -> 979,783
90,76 -> 869,855
959,112 -> 84,112
879,494 -> 879,257
933,425 -> 933,619
64,391 -> 64,21
106,305 -> 253,452
324,152 -> 853,152
666,225 -> 39,852
370,904 -> 257,791
592,845 -> 592,15
936,971 -> 267,302
147,210 -> 62,210
308,323 -> 495,323
212,918 -> 110,918
229,392 -> 685,848
896,132 -> 326,702
483,143 -> 605,265
251,317 -> 130,317
758,93 -> 445,93
156,286 -> 458,286
401,904 -> 383,904
244,256 -> 851,256
928,411 -> 612,411
642,920 -> 642,420
494,707 -> 494,225
87,112 -> 87,256
972,907 -> 83,18
139,104 -> 139,761
493,725 -> 493,529
981,145 -> 459,667
390,240 -> 702,240
466,982 -> 807,982
320,143 -> 692,515
477,649 -> 477,206
456,254 -> 456,578'''
'''input_5_list = [[tuple(map(int, i.split()[0].split(","))), tuple(map(int, i.split()[-1].split(",")))] for i in
                input_5.splitlines()]
input_5_list_refined = [x for x in input_5_list if x[0][0] == x[1][0] or x[0][1] == x[1][1]]
points_crossed = []
for x in input_5_list_refined:
    x.sort()
    if x[0][0] == x[1][0]:
        for i in range(x[0][1], x[1][1]+1):
            points_crossed.append((x[0][0], i))
    if x[0][1] == x[1][1]:
        for i in range(x[0][0], x[1][0]+1):
            points_crossed.append((i, x[0][1]))
d = dict(collections.Counter(points_crossed))
f = 0
for i in d:
    if d[i] > 1:
        f+=1
print(f)'''
# day_5:2
'''points_crossed_2 = []
for x in input_5_list:
    x.sort()
    if x[0][0] != x[1][0] and x[0][1] != x[1][1]:
        m = (x[0][1] - x[1][1])/(x[0][0] - x[1][0])
        c = x[0][1] - m*x[0][0]
        for i in range(x[0][0], x[1][0]+1):
            y = int(m)*i + int(c)
            points_crossed_2.append((i, int(y)))
d = dict(collections.Counter(points_crossed + points_crossed_2))
f = 0
for i in d:
    if d[i] > 1:
        f+=1
print(f)'''
# day_6 (this code is BASED)
'''input_6 = dict(collections.Counter(
    [4, 3, 4, 5, 2, 1, 1, 5, 5, 3, 3, 1, 5, 1, 4, 2, 2, 3, 1, 5, 1, 4, 1, 2, 3, 4, 1, 4, 1, 5, 2, 1, 1, 3, 3, 5, 1, 1,
     1, 1, 4, 5, 1, 2, 1, 2, 1, 1, 1, 5, 3, 3, 1, 1, 1, 1, 2, 4, 2, 1, 2, 3, 2, 5, 3, 5, 3, 1, 5, 4, 5, 4, 4, 4, 1, 1,
     2, 1, 3, 1, 1, 4, 2, 1, 2, 1, 2, 5, 4, 2, 4, 2, 2, 4, 2, 2, 5, 1, 2, 1, 2, 1, 4, 4, 4, 3, 2, 1, 2, 4, 3, 5, 1, 1,
     3, 4, 2, 3, 3, 5, 3, 1, 4, 1, 1, 1, 1, 2, 3, 2, 1, 1, 5, 5, 1, 5, 2, 1, 4, 4, 4, 3, 2, 2, 1, 2, 1, 5, 1, 4, 4, 1,
     1, 4, 1, 4, 2, 4, 3, 1, 4, 1, 4, 2, 1, 5, 1, 1, 1, 3, 2, 4, 1, 1, 4, 1, 4, 3, 1, 5, 3, 3, 3, 4, 1, 1, 3, 1, 3, 4,
     1, 4, 5, 1, 4, 1, 2, 2, 1, 3, 3, 5, 3, 2, 5, 1, 1, 5, 1, 5, 1, 4, 4, 3, 1, 5, 5, 2, 2, 4, 1, 1, 2, 1, 2, 1, 4, 3,
     5, 5, 2, 3, 4, 1, 4, 2, 4, 4, 1, 4, 1, 1, 4, 2, 4, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 3, 3, 1, 1, 1, 1, 3, 2, 3, 5, 4,
     2, 4, 3, 1, 5, 3, 1, 1, 1, 2, 1, 4, 4, 5, 1, 5, 1, 1, 1, 2, 2, 4, 1, 4, 5, 2, 4, 5, 2, 2, 2, 5, 4, 4]))
copy = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0}
for i in range(256):
    cofy = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0}
    for x in input_6:
        if x == 0:
            cofy[6] += input_6[x]
            cofy[8] += input_6[x]
        else:
            cofy[x - 1] += input_6[x]
    input_6 = cofy.copy()
print(sum(input_6.values()))
'''
# day_7
'''input_7 = [1101, 1, 29, 67, 1102, 0, 1, 65, 1008, 65, 35, 66, 1005, 66, 28, 1, 67, 65, 20, 4, 0, 1001, 65, 1, 65, 1106,
           0, 8, 99, 35, 67, 101, 99, 105, 32, 110, 39, 101, 115, 116, 32, 112, 97, 115, 32, 117, 110, 101, 32, 105,
           110, 116, 99, 111, 100, 101, 32, 112, 114, 111, 103, 114, 97, 109, 10, 775, 180, 473, 1346, 1189, 1553, 196,
           427, 788, 25, 159, 204, 851, 24, 1404, 91, 308, 1096, 747, 278, 1185, 36, 752, 57, 54, 583, 570, 260, 735,
           1192, 72, 552, 103, 693, 383, 202, 78, 1050, 453, 116, 333, 182, 765, 60, 372, 201, 291, 1642, 49, 80, 918,
           98, 1443, 36, 577, 696, 1289, 56, 220, 56, 51, 550, 1666, 651, 652, 1508, 70, 40, 1473, 57, 1065, 32, 6, 537,
           1053, 315, 711, 163, 476, 1006, 3, 1092, 18, 1304, 237, 358, 457, 888, 36, 639, 39, 1051, 723, 590, 1242,
           210, 1217, 473, 488, 1554, 729, 776, 307, 375, 243, 186, 436, 94, 451, 1230, 495, 861, 480, 28, 323, 529, 92,
           65, 43, 564, 143, 183, 81, 965, 82, 168, 303, 331, 99, 921, 583, 1349, 182, 353, 626, 150, 475, 1388, 381,
           539, 1190, 664, 923, 1579, 564, 31, 186, 171, 415, 69, 82, 621, 579, 636, 787, 154, 384, 463, 124, 213, 270,
           318, 16, 21, 429, 1285, 1052, 755, 248, 67, 1021, 20, 165, 789, 7, 456, 18, 1432, 1379, 3, 108, 96, 40, 42,
           1148, 665, 526, 392, 616, 405, 633, 399, 152, 388, 9, 1078, 159, 454, 945, 330, 2, 455, 288, 288, 72, 313,
           827, 521, 939, 186, 680, 253, 386, 917, 317, 346, 1897, 520, 662, 558, 919, 31, 1141, 1025, 29, 80, 601,
           1001, 199, 128, 1721, 1221, 367, 29, 722, 186, 344, 136, 415, 718, 122, 7, 879, 195, 1430, 250, 65, 391,
           1296, 154, 39, 647, 861, 175, 18, 448, 131, 568, 322, 20, 290, 828, 844, 135, 622, 409, 236, 40, 341, 767,
           31, 917, 5, 335, 27, 205, 63, 18, 1262, 615, 1819, 291, 1263, 179, 206, 686, 102, 18, 483, 525, 331, 303,
           932, 664, 337, 774, 1080, 22, 177, 891, 780, 523, 362, 38, 219, 281, 72, 861, 48, 1382, 1497, 249, 343, 404,
           292, 1252, 1, 532, 370, 421, 155, 1728, 110, 1778, 804, 944, 142, 1508, 155, 967, 1201, 1066, 706, 613, 1222,
           40, 1000, 558, 616, 693, 378, 124, 35, 91, 514, 1445, 7, 280, 775, 744, 421, 236, 597, 143, 380, 91, 1564,
           111, 1359, 711, 453, 73, 247, 427, 119, 182, 508, 598, 514, 543, 297, 182, 397, 24, 1317, 107, 766, 428, 877,
           580, 1135, 13, 266, 568, 369, 570, 5, 214, 1222, 150, 225, 93, 1168, 7, 793, 346, 17, 70, 127, 734, 1428,
           1513, 274, 409, 1291, 498, 958, 535, 37, 268, 994, 165, 662, 59, 125, 267, 557, 28, 259, 77, 1226, 588, 499,
           105, 15, 238, 272, 272, 100, 329, 642, 68, 356, 782, 90, 674, 608, 431, 1, 442, 835, 3, 780, 51, 394, 146,
           71, 231, 582, 81, 595, 921, 913, 398, 831, 1107, 491, 801, 371, 407, 746, 1337, 196, 7, 86, 427, 72, 217, 3,
           98, 717, 1268, 991, 187, 103, 256, 616, 172, 125, 831, 1380, 935, 281, 1534, 435, 868, 1291, 51, 894, 91,
           527, 443, 868, 1300, 72, 1108, 259, 641, 381, 1103, 580, 422, 310, 953, 97, 8, 198, 1249, 1069, 342, 953,
           464, 66, 648, 683, 184, 702, 1488, 440, 389, 408, 0, 47, 1023, 45, 63, 999, 131, 73, 135, 256, 1586, 798, 61,
           43, 708, 138, 500, 952, 10, 170, 1287, 956, 1454, 886, 1117, 405, 1064, 252, 1218, 334, 316, 1116, 485, 63,
           336, 1218, 528, 309, 86, 833, 168, 955, 45, 993, 841, 480, 336, 512, 835, 296, 285, 340, 81, 1291, 61, 51, 5,
           284, 1114, 120, 794, 1444, 889, 28, 0, 327, 134, 71, 1040, 230, 48, 49, 837, 1191, 558, 3, 26, 760, 1038,
           104, 320, 87, 464, 270, 115, 357, 277, 285, 488, 1649, 477, 972, 423, 524, 657, 20, 395, 958, 528, 13, 125,
           391, 90, 334, 314, 1022, 1147, 200, 1357, 1092, 559, 610, 193, 296, 60, 188, 0, 2, 277, 540, 365, 79, 278,
           199, 1327, 573, 615, 95, 677, 285, 143, 182, 226, 12, 661, 492, 189, 526, 75, 1358, 923, 228, 59, 417, 535,
           544, 270, 1040, 197, 2, 216, 1217, 372, 1034, 84, 16, 725, 1798, 352, 147, 290, 528, 1091, 105, 476, 725,
           137, 474, 75, 1313, 644, 92, 43, 286, 47, 118, 11, 865, 1316, 1464, 1189, 673, 67, 612, 183, 379, 309, 464,
           207, 31, 64, 1375, 34, 413, 618, 131, 1459, 178, 179, 81, 245, 316, 223, 230, 697, 337, 977, 188, 1335, 811,
           163, 592, 181, 93, 108, 865, 112, 20, 497, 986, 1124, 73, 128, 96, 107, 1288, 179, 229, 145, 1293, 1224,
           1308, 748, 768, 143, 38, 33, 1842, 64, 45, 1209, 984, 269, 371, 1451, 876, 1372, 65, 275, 173, 1569, 298,
           187, 91, 522, 133, 39, 709, 878, 2, 123, 195, 1435, 1569, 482, 1047, 322, 382, 796, 38, 903, 24, 950, 387,
           510, 460, 570, 499, 545, 561, 158, 383, 213, 978, 1329, 380, 938, 280, 267, 762, 841, 713, 111, 357, 71, 19,
           121, 581, 91, 177, 869, 1138, 173, 14, 145, 155, 21, 353, 340, 1145, 113, 594, 685, 91, 781, 558, 500, 10,
           33, 300, 270, 457, 675, 850, 64, 49, 81, 311, 906, 404, 207, 176, 309, 45, 855, 16, 9, 881, 428, 194, 300,
           329, 715, 985, 559, 656, 66, 184, 1529, 8, 1131, 610, 78, 522, 338, 492, 1378, 47, 163, 448, 111, 700, 3, 19,
           796, 876, 224, 212, 51, 524, 273, 597, 980, 0, 10, 205, 8, 985, 38, 876, 6, 91, 435, 1273, 38, 147, 214, 362,
           1, 95, 87, 724, 1126, 807, 378, 105, 89, 276, 1076, 107, 552, 1082, 32, 896, 202, 177, 946, 753, 1106, 464,
           72, 61, 225, 55]
min_fuel = ["", 10 ** 17]
for i in range(max(input_7) + 1):
    fuel = [i, 0]
    for x in input_7:
        fuel[1] += abs(x - i) # for par two replace this with (abs(x - i)*(abs(x - i)+1))//2
    if min_fuel[1] > fuel[1]:
        min_fuel = fuel
print(min_fuel)'''
# day_8:1
input_8 = '''fdceba bafdgc abeg afbdgec gbeacd abced bgc fcdge bg bedgc | bafdec cgefd gcebd ebcgd
gbfac fegbda fcedagb bea ea abcdef dgbfe gfabe dgea gbdfec | gdea bgefdc bea efdbg
eg dagef gbcfeda ageb cegbfd gfe dbefa facdg abfged cedbaf | befda daefb egf gcdfa
edgacfb gcfd dgb degfab bcega bdagc cgafbd fbacd gd fceabd | fbdac gd gdbcaf dgb
eaf bedgaf dbafc bfceag fedcbg eafdcgb debfa ae adge gdebf | abcdfeg febdg ae daebf
afbdc aefg ea edbacfg dbefg eab gcbfde abecgd bgefad bfdae | gfea bfdea gbdef fcdebg
deagf daegc dcgabe abcgdfe gc cabg fedgbc cdg dcafeb ecabd | ebfcdg gcade cfegdb dcg
agecd bdegca cfea af abdgef fbcaedg gaf dgcfb fadgce afdcg | fadgcbe ecadg bgefad fag
degcba cfbge cdgaefb gbecfd ae gafdc gfcaeb beaf cae cefag | feba abdcge becagdf bagefdc
bfcga ecgdbaf facedg cdfae abecf eb dbae ebf ebcdfg cefabd | bafec ebf afdce egadfc
cfaegbd adbecg ebgca debafg cdfge fa afg cafb fgaec afbcge | gcbaef cdfeg efgacb gaecb
efacdg egdbfca bcdagf ceadg dface daf bafec dfeg fd cdgabe | efbca cdgae daebcg geafdc
beg dgfab geaf gdeab fbcagd efdbcag cbdefg edbgfa ge baced | gdfab ge gcbdfa badfg
gdab bfdeca bgfeac becagd abegdcf edcgf dcb edbcg bgcae bd | dbegc dfbeac cafgbe db
cefga dc fedcgb dcf fdabe ecbfda dcfea dabc debgaf bfgadec | gafec aebdcgf agdbfe cfega
bfdec gbac bda dagfeb becdag cagebfd agecd feacgd ab cdaeb | ab bacde ba decgaf
dbg ecabg gacefd dbaf agefd gebdcf fdacegb bedga fgbade db | dgb gbcefad dbg bdagef
fbge gaedb eg dbeacf dgcafe gedabfc cdgab aegfdb dbfae ged | dgcba abegd bdacg begda
abefg ad gcebd dae dfbgce bdeag dgacfe dcab cgafebd geacbd | agfbe ebcgd dagcbe egbda
gdcfab cdeafb fg dbeacfg gcafe cbeafg gdcea ebcfa gaf fgbe | acfeb fag dcgae acfbgd
cegfad fedb fbgadce bacdfg acbeg bad fcdabe debac db cefad | fdgcae cfgdea edfcab cefad
fbg bgec efbac fbgca gb fbcdea bfdgea bdcagef fgadc cbeagf | fgb fegdba fbaedc aefcdb
aecfd agcdfe bdegcaf efbad bfeadc eb aegbfc dcbe bef dbagf | bcfead fgbcea eb aefdb
gedab cfdbg egca dfegab gedcb fdebcag acfebd ce cbe decgab | acdbge bfacde bgade cedabf
edfg fbgdae bagec feagb fbg abgdcf dbefa bdeafc agfdbec fg | dfeg daebf dcbfga gf
bcgaefd cfbeg cdefgb fcde adgbec acgbf efb gebdc fe dabfeg | abgcf aegbfdc bedacgf edgabc
dgfbc bfaegc fad dcea adcfg edagbf da eadfgc cdafegb geafc | da fcgad gdbfc afgbce
cdea bafdgec gcbeaf bcafd fdbga bcd cd ecfba fcebdg efdbac | dfgebc cbd fcbad cdae
afcegdb edagf ab gbfce ceab gdfbec fdgcba gbeaf gab cgbaef | ecbgaf bgafecd cbea gacbdf
efgcab ecb bedf be cbfgaed bcdea cdefab ecgad fdacb gafbdc | adfegbc gcafbe fcbgae adecb
gfecad gc egcf afcbgd ebadcf cag eagcd acefd bagefdc dgeba | gc acg dcafe begad
dacgb cbadge dcf cf cdbaf afgc bfeda dgfebc bdafgc feabcdg | cgfa dbagcf fcag fagc
fgb fcabd fdage bafegc bg dgface afgcedb adbgef dfbga bged | abfdc ebfagc agbdf dcfegba
afd cdfega cdbgfe bgefad dfegc becfa feadc bcfdega da agcd | deafgc fabce da gbcdef
fcdgb baefgcd fe dgeabc ceabd fde eafc febcad defbag cbedf | bfedca gdcbf daceb ebgdfa
cbgf bg decafgb ecadgf dcagf gfabd bgcafd gbd cbadge dfeab | cgfb edbfa dbagf gbd
bda dfgbec efdga cagb bgead egcbad ba dfceba degcb egabcfd | gfead ba gbac egbdc
bd dab cbgdea dbge bcdga gdcaf fbdgeca abgce abdfec cbegaf | abd bd gebcadf dafcg
faegcbd bdagcf cdgbfe cb efbdg gdafbe bdc aegcd becf degbc | bc cb fgdabc bc
cfbae bcfged cafdeg fa acf febcg fegcdba bagf afcgeb dabec | cfgbe egdafc fbgdec cbfea
dabfgc gdcfbea cedaf gebda dagfec ecbf beacd bac bc cafedb | begda bc decab defcga
ecd decgf gebc ec dcgaf cfaebd efdbga afebdcg bfedcg dbfge | dgfecba cgeb bfdecg aedbfg
efb afbgdce fdceg aebg afcbg gdfbca efcgb be dcbfea fagebc | bgfaedc afbcg efdgc cgfeb
eb adcfeb eab dacbg gebcfad gaedb cgbe gafde gedcba gcfbda | abgde bgdae daefg cfbagd
cdfeab cgfead bfgdca bfgcead dfcea bdeaf aedgb bf becf bfd | cefb dafce dcebaf edgcafb
acfbegd bf gfb cbaeg gaefd fegab cafb agebdc bfgdce bcfega | fdbgec faegd eafgd gbf
eadfg gdc fegbcd ebdfc debcga bceafdg eadcbf bgfc gecdf gc | dcfbea debcf gdefc gdc
gdb afbdgce gb gfdce dacefg edbfcg bdaecg fegb bdafc gbcdf | cfdbg dbfgc fcdegb debcga
bfcdg befcd efgb cgdbea ceb eb fdeca efgcbda dcbfag dcebgf | gfbcd ebagdc dabfgc dfbgc
acefdb afbgd cda ac adcgfb bdgeafc gcaf gabedf bgdac ecbgd | gfbdac dbgca edacfb dfeagb
cfadb dfcgea aebdgf ba edfacb eafbdgc baec cdbfg abf cadfe | dgcfabe aceb edgcaf afdgeb
cgfda ec cgdbea gedcabf dfgcab egcf beadf dfeac ecgadf eca | gfcbad feadc fcead gcafd
edgfa gfbd bg adfcbge agfbde edcgfa abfec abecgd eabfg agb | fcaeb dgcefa facedg bdgf
db eabcdfg gefcda cbegdf dcbg bdf gedfb edcfg fdecab beagf | ecfadg cgdb bcdg gcfead
dbeca cdbafg gcdaeb ec feagcbd fdbea cbe gdce bdgac abefcg | cadbg dacbg cbadg bagcef
cagbfde gbaec cfbage fa bfcadg efacb ecbadg cbfed bfa afeg | gefa abcef dbfcga fbeca
cdefg degacf dbfca dfcga cedgbf fdgaceb gaed gca ga gcefab | ecgdbf gedcfa gdcef gcdef
abcdgf acdge eac ea dabefc aegdfbc edcfg cebdag abgdc agbe | aegdc bcgad dcgfe fedacb
egbcdfa becaf ecbdaf dcaf edabc cbf fc ebgfa bgdaec bdefgc | ebdcfa ecbfa fcb cbagde
bacfed ecagf ad gadfe aed bdga fdgbe dfaegb gdbefc dbcafeg | gafec gfdeb fadbcge dcegbf
fcdgbae bgcadf bged eabdc ed bcadg baefc acgdfe eda cdgbae | fbgcda bgcad faceb eagdcf
fbcd ecfba aegdc dab bceagfd fbdeac db afecbg decab fagbed | cegda bd cgeda bd
gcdeab gbedcaf gefc defba ced faedc cbgdfa dgcaef ce cgdfa | abgcfd cfgbad cgeabfd dfcga
ba gfdbac bdgecaf eafcb gface bfa eagb cgefad dfbec bfegca | ebacf ab gdafbc cgfeab
feadcbg fbg decbag ebgdfc faebdg dabeg feab fb dacfg fgbad | agfdc gefcadb gdfba gfcdbea
bcgfead adecfg dcfb dbg agfdc egcab fdgbac bd gdbca gfabed | bagedcf gebca fcadg gbd
adbfec afgecb edf cbefd fegcda deab cfbgd ed cebaf cefbgad | efbcd fegcda bfdacge fgcbd
bf gcabdfe adefg fdgab adbgc bcgade efagbc cfdb bfa bcgdaf | abf fba bdgaf fagbdc
fgeadbc bfcgd dcga cd bfedca abcgdf badgf fcegb daegfb cdf | cfd dc bdgcf gcebf
bgecdf geab abd begdc defcba agcbd ab becagd dcgaf abfcedg | agfdc bda dab dbacfe
egca gcf aedgf gc dbfgae gebdfc fecdga adbfegc dcbfa afgcd | gfeda deacgf ecgfda deagbf
cdfbg dafb gcbde bfc aecfbg fagdc agdcfb bf bgcdeaf cagdfe | ceafbg adgcf gdecb bf
geabfc ecgfa fgebd dgeabc aedgf facd fcedga ead da fbecgad | degfa cdaf aed bacdeg
dcg cbde abfgcd fcgeab gaceb dc dacbgef cgaed degfa degbca | dcfabg dacgeb debc dcfbga
agc fcgdaeb gdba dfabc fgced gecbaf efdcba agdcf gcadbf ga | cdefg fcebag ebdfca fcbega
feabdgc badef fg acfbdg gfed afbge afg dbeafg begac bfcead | fedcab fabge agbefd fcdbae
bfcead cfe bdgafe cadefg fbdc bacef cgeab fc dbagcfe fbdea | adgfce cfbd cdfage fgacde
cedg ebcda ebfcga efdbag dcfba cgeba de badcge eda fbcagde | cgaebf beagfd cbgae efagbd
cfead acegd cedbgf cdafgeb dcebg dabcgf acg aegb ga eacbgd | dcefa agdce ga abge
ac bdcgf acbefgd cgdaf fdgbca dbcefg bgecaf cbad cfa gfade | gaecfbd adbc fdcgeb adcb
dcgebfa fcdbg adcgbe bdfcae dec abcfe ed fcebag ebfdc defa | aecgbd dgcfb gcbaef bdfgc
becdg ag dbcfge fadegb dga ecgbda dgbaefc cafde gbca gaecd | agdebc bfegdc dcafe debfgca
debgfc dcbaegf dbg afgcd fecgb acbdeg bfgace gcbdf db bfed | fbed bgd db dfcbge
dcegba gebac adfcg egd debc debagf agdec ecbfga ed fbecdga | dfbage deg efbadg fagceb
cf dbfgec bfedac bcf egfc bdceg dbaceg fabcdge gbdfc gdabf | cfgdeba dgbcf cedfab cbf
gaedbfc bdfae gfe fdgeab dbefg gcdeb fdbeca fg efgacd agbf | feabd fdegb dbafe bfead
fgbce cgdfa ab gdbfea cafbdge cagfb cdgfbe ebgfac bace bfa | ceba afcdg ecfbagd efbgac
cedgf gc gedaf faecbd dbfceg dcbg cge efbgca bfcde fcbdgae | eafgd cbgd fagde edafg
dbgfc dbfce de dbe cbgefd dafbcg cabfe debafg fceadgb edgc | abefc cbfadg bcdfe cdeg
fabde db fbeac dbf dfega ebcfdag cefdba cdbfge dcab gfbace | dgefbc bfd db dacb
fgaedb ecd dcbfe edafgc dc bgefc edfcab dcba afedbcg fabde | bgcfe fgaedc cd dfgaeb
adcfe dbcga eb dbe bceda cafgebd aefgdc bedcaf fagdeb fbec | abgdc bde deb bcadgef
dacgf gafdeb ag cabfdeg bfdac dbfcge gdeacf geca afg cdgef | fcgbde cegfdb fdecga degfc
fc cbf gfbadec dabef cbfda acebgf gdcf bfgcda bagdc gdebac | gecabf dcgf fbc cdgf
cbdafe fdabe gdafcbe bcgade adcf dfegb abd agfbec da febca | acgebf bdfaec adb agecbd
ebgfd fdgcbea dc gfdecb edgc dgabcf afceb dbc bgdfae cfbed | dcebf afebdg adcfbeg gbefdc
faecbgd gd gabd cdebg dbecf deg cagfed bcaeg fcgabe abdceg | cedgb gebdc cefgad aegcb
de gbedf dgcebfa gbfae cbde cbadgf dcfgb fedcbg edg cgafed | fgadce daegfc de eagbf
gadfbc ec bagcf edfacg begfc ecab gdbef cgedafb ecf bgfeca | fbcga dgecaf fce cbea
afe abdfgc egfcbda gabcf edcafg gcfeba acefb abeg ae ecbfd | degcfab dfaecg gdafbc ecafdg
acgdb fbgd decfa fg bcegad gfa debfagc gfcbae cabfgd acfgd | bdcga dfgca dagcb cfabgd
gefac ecfdb acdfbe adfegb gabefcd gd dbcg gdefc cfdebg egd | gdbcfe decgf efdgc gd
adgfe gfcdeab fgdbea aefcd dfbgec abgf eag egfbd cdbage ga | fgdcbae dbgfae bgdaef edgaf
bgfae degb cadbef cbagfe dba db gcabdfe fgbad dbegfa gdacf | adgfb dbgaf fcedab dba
fb cabdgf becgda bgaf gbdfce dagbc cabdf bdf bfagced edcfa | dbcfga badcf aedcf bagdfc
bdaegf ebgd gdfeacb gd gafbc agd bafgd ecgadf fdbeac dbfae | degacf egdb ebadf dfbeagc
dfecg bdceg dcbafg cafgedb begdca gcf afedg gdbfce cbef fc | dcfgbe egdabfc cfg fdega
dgfcab cdefga fcebdag cb bcd abcg dfagc bgfcde cadbf dbfea | bcd fdcbeg gedcfab gcdabf
edgcbaf gcaf dcbfeg edfcg adcge dceafb cfdage dbeag ace ca | dcbfge fadceb cdegf befacdg
gacde bgdac gdcbaf fdagb bdc cfbeagd bc gcbf abcfde fbedag | dabfg eafbcd bgcda aefcbd
ebdcaf cegbd afdbceg faeb cgdefa bfced ef cbfda cef bagdcf | dfebc cfdbag ebcfd aebf
becgaf adceb decg cad dcafgbe efdba fdbcga bdcaeg cd gebac | bagce dac gbcfad adfbe
dcaeb geb dgcfb gbafec ge eadg daecfbg ebdacg deacbf ebcgd | dgcbe beg adbec bfadce
bcfega gcdba gfcab cebgd bdcgafe agd afcd geafdb ad dcagbf | fdca agfbc fadbeg gefbca
cbdea ecbfd gecafbd def ef efcg fabgcd agedfb bdfcg egbcdf | ecbad fbgced bcfdg fde
ebgacfd gbfeac gcbde degac ace gbadce gfdac fgbdce ea abde | fdgeabc bedgca ebdgca bdegc
ca gaedfbc cfa dgfabc bcdgf fbdgec geadf agcfd cbag bedafc | fdcgb bcefdg gdbcf acf
fcg bcadf cg cfgbde gfbca ebdfacg geca defabg befga acbgef | gfaecdb gbfca fgc gebfa
cafegb dc gcd dfacg cefga dfagb cade bcedgaf dfcgae bfecdg | cbedfg ecad cd cgaef
dfcba ad gbdafce bfgdc fgebac dacebf dab dcae gebfad bacfe | bcdfg caed ad cbgfd
abfegc dbfea aedfgc fdcag cdbg bc fcb fgcdba cfegabd cfbad | fdcab fegcab bdeaf bc
bcedf abdec ae daegcf gabe bdcga facbdg daecgfb dae edagcb | dea cbdfe bage ea
eagdfcb adceb dc fecagb cedgab cbeag daebf dgbc adc acdegf | dbgfcea cbead gbfcea geadcfb
ebadg cdb afbgced badgef bgacf dbcag daec cbedag cd gfcbde | baecgd acfgb adebgc fbdcega
ceagf egdac aegdcf bgeadfc edc afbecg cfbdae ed gedf bgacd | cgebaf fegacb efcagb ebafcg
adfgbce acgef adbgef egcfad cafdb cafgb fgbeca gfb gb bgce | bedcafg eacgf gfdace gbf
baefgdc deacfb egfb gdace bcaefg bg gba aegbc eabfc cdgfba | caged dfaecb gbef ecgbfad
ca edgacf abdgf gcefba dace gca ebgfcad bdfegc agcdf dcfeg | adefcg fgcbde afgdb ac
cdafg gdf agcfe fgaebc df dcabg dcfbge acgdef fead gfeadbc | gdfac gcdab fd fagec
bedag dbfca gdfe gedfba baecgf fe efa dcgaeb defba efgbadc | dgbea bagde aefdb abedf
cabegf ecbagfd aebcgd dg cbgad gaecb dcge cadfb bgd ebfagd | cegd abgcde gdb afcbd
abfcd agdef efc bdafgce ce acge gdfcae efgadb efdgcb edcfa | acbdf cfabd cafde gfdeba
egca bcg dfbaec gefdb ebdac cfbgad cg egcdba becdg bfgecda | ebgacfd becdg ebfgd edgabc
bfaegdc gfeda ecg ec bacfg cdae aedgcf efgac egdcbf begfad | gabfc adfge afbcgde fbgca
gacbf adgfbe gdcbfea bcgfea bdf agcfdb cdegb df fbdgc cadf | cedbg gdcbaf gecbd cgdafb
fgbac fbgad gefcba dbeaf abcfgd dg fdg bfdagce gadc fcebdg | fbdea dbegcf abfgced acfdbg
gae cfabg dbceg fabgced ea fcbdag ecfa aecbg bfcgae faegbd | aebgc eafc acgbe bcfadg
fbcad gcbefa acbfdge ecgd cegabd ec dbage aefbgd ecb cbaed | ecadb agebd bgdaec decg
begac eg ebcfa fgbdca eag gcabd gdcbefa adebgc cged dagbfe | eg eagcb gfacbed cgeba
gfcdea dbeac ebc bdfceg gfecbad bega agdec bcadf eadbcg eb | cegad cdaeg ecgad gedac
efbag egfdba agbd fdage gaebdfc daf gceafb cdegf da afcbde | abfge abdg begafc ad
ceda gfedac ad aegfd egfcba edfgb agfec agd gafbcd gbcdafe | gfdeb ebdgf fcbgea aedbgcf
fagb cdeag bgfde af afe dgfaceb feagd cabfde bfdgec adbfeg | fcbegd gfaed fea fea
efcbdg fdagcb de cefba fdcgb dfcagbe fed cegd gdfeab ebdcf | ed gced cdeg ebfgda
cbdeg bdgac bca aecbdf bdgfec cafgd acdebg ceabgdf ab gaeb | gaebdc geba cbgade ebag
gedac afcgdeb begc bgaecd fabdcg cga efdac eagdb cg daefgb | dafgebc eacdg gc cbeg
gaceb bgefca eg bfeg age aebfgdc ebafc abcgd badcef gafdce | bfcage bfeg fcdbgae gabec
ebgdcf aedf gcfda gefdca eabcfg dgf fd agcdb ecfag fgbeacd | cgdaf gdcba feagcb fdg
efbag efg ge fdgab befca dfbaeg gdae afbdgc gedfbc fgdbcae | ebgaf edfcgb fbage fge
gaefbd bf agfecd efadg agfb dbgef ebdcg acefdb feb aegcbfd | egfda gafde gbfa bfe
dafebgc bfdecg cdaebg da gcdbe dab bfceda adge bdcga bfgca | dcgbae da cagbfed daeg
ba gcfad adbfg fabdeg dbfegc dbcgfae acdebg aebf bdgef abg | faeb bdefag cgeabd egcabd
gafb ga fdcgba ebcad gbfcd deacfg dcbga cfegbd agd agebcfd | gecfbd cfbegd cbafdg cegfbd
fa fab cfbea gbeac cefdb cebagd cdegabf cgfa dabgef faebcg | abf efcab bgaedf gcaf
cdafeb bg aedcg gab acbfedg gbfd bfaecg bcfda gabdc gdfbac | bg gcdae bgdcfa fbgd
afdgc gefbda ebfc dgfec dbfge cbdfeg gadceb ced ce dbfcgae | ce edfcg bcef dcgbef
egbafc fdag ad dcbfaeg cgfba dfacb baecdg dac gcabdf edbcf | fgabecd bacefg agdf befcd
dcefgba edaf ebafc gbecaf de cedfgb bdace cbfead agdcb dec | gfaceb ed gcbad begfac
dcea aefdb eaf badcfg ebfdg beafcg ae befdca ceafgdb bacfd | aef dfbea fdgabc afe
ag bgac dgfebca gea gdace bceda gedcab bcafed egcdf ebdfga | cabed bdeac dcfeg eadcb
eacbf ecabgd abcegfd cbage agdcef dbge bgc bg dgfacb dagce | cagbe cebdgfa edacfg bg
abd db cdbefa dagfeb dceaf fcaedg cbade fcbd egbca abfcdge | decab aebcd cafbed cadbe
gdefb deg bfgaed ebgaf afed fgbcd fbedgca adecgb ed gabfec | fdbcg faegdb fgbae egcfbda
decf dbfgce ecdfabg acbfge dbe dfbeg fgabd fcegb bdagce de | cegbf bedgf de fadbg
abgedf cbag fecgd ebcfg fcb bc cebfad abfcge egabf bcegdfa | egfdc abcdef fegcd cgefadb
cadf feabc da cbgafe bfcdea adb bdagec bfdae bdcegaf gfbed | bcafe adbegc cbfae defcgba
bdfe db gcdbfe bfcag edbgcfa abegcd fbcgd dfgec gbd adfgce | dgabecf dcgfe db gcfdb
acf afbceg dbfae cf ecfba abdecgf cgbea gcef fgabcd dbaegc | cfge afedb aebcg gdbcafe
dgabce fbcea eafdbcg fdcg cd fgdecb fedgb afdegb dbc dfecb | cd dbc aedfbgc cdegba
fagdbce abd fgbedc decfb bfdace baedc ebfdag agdec bcaf ba | daecb acfdbe cadeb dba
dfceb bcfedag gbecdf dgfe ebdcaf fg fcg cafdgb ebgca gfbec | bedcf dcefb bfcaed abdefcg
gcfba badegc bga afbdcge ag fgebc bfacd dfcegb bafegc faeg | gedcfb cadbf fbacg bcgefd
cbg aedbcf ecbgfda cg fgcdbe ecfbd bcegda afegb bfcge dcfg | fbdce gc bcefd gcedfb
dgbcf ebgd fgdbca agdfec bdfec ed efcgbd cdgaebf fde fabce | fedacg cdbgf ed efabdgc
eafgbcd afcgb gbfcda gecabd efgcd acgfeb gecfa ea gae feab | edbgcaf dbgeac gacbf beafgc
acgfdeb cegabf beacg bacfd dbcea gacbed gcdbef de edb eagd | de dgcbfe ed daeg
defa cdbagf bfa agbfced cfbegd efdgba egbaf egfbd bcgea af | fa fbadcg gadfebc cafbdg
dgebcf degab afed gafbd gabfed df gdf bafgc bdcega daecfgb | cebfadg debga abgfd abgfecd
gdeca dcegba dcagfe ageb acefbgd egdcbf bgd adcgb bg bcadf | fgedbc gbdcef ebag gfbced
dc edbgcaf cbadf fdc bfdgac bgadf cbgdef fdageb ebafc adcg | dgbaef dfc bfeac bacfe
eagcbdf caefdb fceda egfab bdca gbdfec efcdga bc ceb eabcf | bface bc bfdeca faecb
gadec becgdf aedcb gfcdae edagfbc dg gefca acegfb fgad egd | cdeab fagec gd dcgafe
abdc cedag cd fabdcge agebcd gdeab feagdb gaefc ced gdbcfe | baged fbceagd ecd edc
gcadeb gabed gfab bdfec abfged fa ecgafd fad gfedcba dbfae | fbced gbaf aegcdb acdgef
df bcgfe fdb beacgd gefdcab fead aefdbg fbcgda edabg dgbef | efbdg gdefb eafd baefdgc
daec bfgde gedabcf bgcad ae dbgaec age afcdbg dgeab cafbeg | eag beagd edfbg degbac
fgbcad agbcd aecbd febcgd fdagceb gdc gc gfdba cafg gaedbf | geafdcb dgefab ecabd dcaeb
bfgca febag dgefba egda efcbda eab fdbge ae egfcbd gacdbfe | aedg efgba dcagefb efdacb
bdagec ecbfa daebc gafcb cgdfea efa fdeb dceafb ef gcfdabe | efcba cabged gfabc fbacde
fe gfabe dbaceg aegcbdf dfcbea fcabg deagb gfde edagbf efa | aedcfb efa afe fe
adfceb eb gdeb fegbda bcfagd fbe agbdf fgeac gafeb defbacg | ebafg feb agfbe bgde
cgdaeb ade agbcefd adfecb febad aecfb efgabc fadgb ed fecd | acbgef facbe cgbafe deabf
bfc fabdgc agcbe dfeac fdabceg ecabf fb bdfe edfcag bdfeca | fb cadebf gdabfc cfbdga
cfbdge adegfbc cdgeab fbg gedf baecgf bcfda fg cdbge cdgbf | fdge gbecd egfbca cfadb
dbcfeag gecda bed eb dfcab abeg agfced dcebfg adgceb abecd | be gabe bed fbdac
fbagec ecfga fgdac ec cbfe agbef gce aefgbd fcgbdae gdaceb | fbadge cfgda gfbace egcaf
bdcfge cbaefgd cagbde fecab fdecga gafd dfe fd gdace edafc | efd daecf cdaefg eacbf
cefgda daefc agecfb fce cgdbefa dfcga dbaef ce badgcf gced | fbdgcea ebafd gdefacb fdcag
ebagd fb fbgd cefda ebcagf cgfbade afegdb bdagce bef badfe | ebafgd bfdgea ecdfa bfdcega
gcedb fdcb aebgcd bf fcgabe cfbaedg fdbceg bfegd aedgf gbf | bfg cdgeb fdebg cebdg'''
'''input_7_list_1 = [i.split(" | ")[1].split() for i in input_8.splitlines()]
count = 0
for x in input_7_list:
    for i in x:
        if len(i) in [7, 4, 2 ,3]:
            count += 1
print(count)'''
# day_8:2
'''input_7_list_2 = [[i.split(" | ")[0].split(), i.split(" | ")[1].split()] for i in input_7.splitlines()]
sum = 0
for i in input_7_list_2:
    foo = []
    goo = []
    for x in i[0]:
        if len(x) == 3:
            seven = x
        if len(x) == 2:
            one = x
        if len(x) == 4:
            four = x
        if len(x) == 7:
            eight = x
        if len(x) == 6:
            foo.append(x)
        if len(x) == 5:
            goo.append(x)
    for x in foo:
        if len(set(x) - set(four)) == 2:
            nine = x
            foo.remove(x)
            break
    for x in foo:
        if len(set(x) - set(seven)) == 4:
            six = x
        if len(set(x) - set(seven)) == 3:
            zero = x
    for x in goo:
        if len(set(nine) - set(x)) == 2:
            two = x
            goo.remove(x)
    for x in goo:
        if len(set(six) - set(x)) == 1:
            five = x
            goo.remove(x)
    three = goo[0]
    key = {0: zero, 1: one, 2: two, 3: three, 4: four, 5: five, 6: six, 7: seven, 8: eight, 9: nine}
    val = ''
    for x in i[1]:
        for t in key:
            if set(key[t]) == set(x):
                val += str(t)
    sum += int(val)
print(sum)'''
# day_9:1
input_9 = '''5796798621237995498765434567987542999765679987545679109878999877899789876532123456998999876887899921
4645976434456789349654321298997679898654698987635678998767897656789698765432012347897899865676798799
3234987545978993298795410989998989789543256897646789498756789546896579877842123456976789954345985678
4356798679989999019987329878999798679765345689856991296545890134789467998956899967895698643239874579
6467999789999898934976598967987676568996457999967999987636789345691346789769987898934987651098763456
7598997999987796899989987959876543456789569898998998765125678956910298899898776799123998862987652345
8789876789865685578999876645987665567998689656789876554034899999891989998987564679099789879876543456
9898765498974324456799865534598786788998798645889985432126954987789878987654323567988698989987664678
9989997987543212367987654323459897899549895434569876556437899876599967996543212459876587898998798789
9877989997662101456798765434567998967932987624778989787548999989679459987687301349875456967899899893
8765678998983232367899896765788939346891295434999999899659879699894349899796532656954344756910923964
9874789019894343456789949878999321235799987545678945998778964578942139769898543769843212345891949765
7965678998765764567893433989876542346987898656789236799889653989943298652999678989754523456789898976
6598789109976975698921012398999763457896559867997647989998799899874569541098799798765676579896687897
5439898929989989789962123457899894568989435998998799878999989798765798432149898649987787899965456989
5212987898999999899854336568999989879979326569109989567898879689878987544234995434599898999874345679
4309875987999876998765687679989878998765412458929875467987854599989698955679989323459979899993214589
5996954676799984329877788989878969899874324567899765359876743489996549877789878912398767789984323456
9875432545789743212989899998967659789985595678998868249965312679865435998898767899598954698765467567
2994321036897654101996936987654543679999989789997854198764301569979423459999954678997643789978578978
0987432128998763219875424698763212478998978999876543298773212458998901267898767889598732345988789989
9876544346789979329876512349998401569897569234987994987654343457897892478999878993349891234899998695
9989875679899898939984701459886212398786456946799889998795464567896789989896999321234989345678987544
9997987889998797998743212598765323987654397899989778999989978679945698999765678930349878956999898433
8986798999987676789655329679876439876541289998878656899867898791239956799954345959499867897899765321
7845679219878565678976598999987556998732378997667545798656789892398745999765237898987656789998654310
6434798998765454567897987898798677899543467896553234987545878989499636878992156987975345899219964324
0123987999874343456789876799549789987654598998421056989434767879976521767989249876543234998909878434
4339876798955102367898985678939891099967899876542159875323854568965410156978956997684456797899989545
5498765986543234488987894799012999129878999987653249986210123467894321249769767898795867956789199656
6599754397654545589996789899993998949999998799767998975351237998995432398758998989986788946999098789
7988732198765657678975698999879876898946999544979877989876456789987643459647899876097899534878999899
9876546019878767889984567899968765667939896532989966592987887893298754598756789965198997323456799989
0998757898989899992099789988754543457898789540199854301298998984129866789998999954249986412345899878
1299898987699954954299999876543212348987698921598763212349999873234977995679439765356897601234988767
2989999876569999895989986987654103467896567892349854334568989964345698934678921976897996532349875756
9879899988698988789878995498976215989995456789498999965689879899456789323567890197998987656756994345
8765677899987677697667896329865423499989997995987878897798768778968895438678991298969398967899873201
8654546789766563459548994219876534578977789104986567789949654567899976657899789349543219988932965412
8643437899854312998435689101987645689665679323975345678959868778957987798934679959654301299549876723
6532126778969409876424578912498756796553568939863203456899979989646799899012567898976432358956987894
8544434567998912998535689843569867989432459949954212568999989594535798989123467987976563567969799985
9655566789897893479697897654567979879421267898767343467898795443123497679935679876899674789997659876
9776789998656799567989998765678998967992349929876556578987654321012989567896798765678985999876642989
9988899875434678979878999879889987657889458919997967689798865452199867456987987654567896798765431096
8799943989545789999868799989999876545678967898789898797659979874987654347899999753459987979876532145
7679969998656789987657678994323965432789979987679789896535989995998321234568939894567899764987687236
7567898959767893976543467995909876645678989996545678965423599989899754359679421986789968973199875345
3467987644978912987784989879899987856789999987434569653213679876789866468789439898993459792012989466
6569999533989999798896797867789898987897999876424678962102398765898977578996598769322375679933496578
8678998921296789679987896545698769399986789764312398993923499654567897689398999954201234567894987689
9799867890145679542998987896789954234995698765101256789894987543458999791249899895312347899995798789
2988656891237789869879998998996895999876789864212345996789987652377899910299756789436556799989999890
3977545789347899998767899989434999879989898987423467895678993210466789321987645679987867989767899921
9865437896556789999946799876545998767999987976534789954589997621245679459876437898798979876545978943
9976545789697899987834689989699767656899876989675678932679876432556789598943218997659989765434567894
9989867899989999986545678995987654545998965498797889321996997543457898797654323789943596986546789965
8896978999879878997668789213986543234987894349898996549875698665678909998965534567892345697656798987
7645989898765655689779898901987662129876789234989998698954539987899919879877645689931257898767967899
9869998789964334578995937892397654398945689345678979987643012398967898767998776798890234999898957898
6998789679892123457894325943498765987834568956889467898952134579656899656549887897789656799999546457
5987654597651012349975434799579989865423567897992378999763245678947999743435998996549767987989432347
4398753299843123457896545678992099654512455789209989398754356789439879842124999987638989876678954456
1239854987653238768998956999989298743101234678998994298765768899598765431029892196547898965466795567
0123995799768545678969869878979349543213455789997899109976779998789987532139789987656987654345789979
3235986999879656789756999867668956975434696899986987912987899999894697643298678999987898543234567898
9945799876998798897645987654456899876595989989765976899998999886989987659987567998998999864365788977
8799895995439899986534598732367968988989878979954695678919998785468998798766456997899898765479899766
5678923994323999876545987543478957999976556767893254589101987674378789899854349876799649876678987645
4567919876214899987689998954989546898765432356789123678919986543245679998765467965678999987789298756
3467898765436789998998999879995434999896521237895019789998997532135998899977569876789988798992109867
2369929876545699999987899999876545689943210235994298999997989949239876789989778989899976569993298989
3458910997676789899876989212987676899656432346789987889886979898949965679999899998998665478989987897
4567899998787895798765678923598789998789545497899996779765765787898764567878921987999543289567976546
6878978999898934989894569654589890249899876569999884568954654656989843458967899876998992123458997997
7989569899919129878989678979678931239964998978998763477943212349879932123458998765876789012567919989
8991356779909019767678989989899842498643239989987542356799302345965431014568919954345692139898929879
9410124567898998654567891294998753679654134699876521245678913459876432323589109765457789256799598767
4321267898987549876899910123987654598763245698776410234569865567997943434578999988767899767895349654
6532356789876434987898943235698765679854659987654321345678976778999894565689989999878949878943298765
7656467893987545998967896545699887998767998998765432456889988999998789689789878989999432989752129976
8767589954899756899459987756989998919879897899876548668994599989987678999898769878997643496543234988
9879678975798967987598999899878959102998766999988767899123678978986567894987653967898765789759449999
2989789996987898998987899954969643213459945789799878943239989865454478923986542656949896899898998931
1299899989776999129976899769878965425678996999656989965398798754342349435965421248956997899987687899
0467999876545789098865689879989876566789987898768997897987659983210456949878543367899898999876546797
2378988965434678987674778998999998987893598999879876798965434975672569898987665456789789998695435896
4499877994323569876523467897988999999912459999989965689896323497883479767999787578995679876564326345
9987656789212489986313568966767897899106598989999984878789212598965998956799898989664868975432101234
8798878994323478965423459954456986798919987678999873165678943679879876545689939996543459876875212345
9659989765434568976796567893299765987898765569898762054567894578998765434696549987654667998994323476
8934599879876899997898879954987654496987654346789943123489965679539854323589998998767898989889456567
7895678998987899998999998769876543345798765767898894344567896789329875434567897689998999878778967678
6796989987698969799998789878998632134899878998946799465679987898919987645679976578999098767669898799
5789995799549347689987678999986721023999999769434878987989998967898998767989787459989298653456789910
4567894698432134567988566789875432335698798653212967999997859456987679878998643212578987832345679891
3779992976553235679977455698998765487987689864343458999876543237897569989797652101459876543456789789
9889689987664346798765323456789887569876598765454569986987652145789698795698768892368987956567895678
4994567899865457999974313345699998798765439879875678955698767234999987654229878765456799767878934589
2123456999876567899875101256789109999984321989989899543249878945678996542101989877667899878989123699'''
'''
G = []
for line in input_9.splitlines():
    G.append([int(x) for x in list(line.strip())])
R = len(G)
C = len(G[0])
DR = [-1, 0, 1, 0]
DC = [0, 1, 0, -1]
ans = 0
for r in range(R):
    assert len(G[r]) == C
    for c in range(C):
        ok = True
        for d in range(4):
            rr = r + DR[d]
            cc = c + DC[d]
            if 0 <= rr < R and 0 <= cc < C and G[rr][cc] <= G[r][c]:
                ok = False
        if ok:
            ans += G[r][c] + 1
print(ans)'''
# day_9:2
'''S = []
SEEN = set()
for r in range(R):
    for c in range(C):
        if (r, c) not in SEEN and G[r][c] != 9:
            size = 0
            Q = deque()
            Q.append((r, c))
            while Q:
                (r, c) = Q.popleft()
                if (r, c) in SEEN:
                    continue
                SEEN.add((r, c))
                size += 1
                for d in range(4):
                    rr = r + DR[d]
                    cc = c + DC[d]
                    if 0 <= rr < R and 0 <= cc < C and G[rr][cc] != 9:
                        Q.append((rr, cc))
            S.append(size)
S.sort()
print(S[-1] * S[-2] * S[-3])'''
# day_10
input_10 = '''<([<({{[<{{((<()>({}{})}<({}<>)>)}}>[<{(([()<>]<<>{}>))}<{({<>[]}<<>>)[([]<>)<{}{}>]}>>]]}}[<[{{[{{[<><>]
[<{{{[((({<<<[()[]]{()()}><{<><>}(<>{})>><<{<><>}{{}[]}>{(()())[[]{}]}>>{[[(<>[]){<>{}}][(()())(()[])]]
(((<{<[[<[{(((<><>)[{}{}]){{{}<>}[()<>]})(([<>()][<>{}]){{[]()}})}[({([][])<{}<>>}{[[]<>]{()
[(<{<[<<<<[[{<[]()><<>()>}[{{}<>}<()>]]<<[[]{}]>{({}())}>]((((<>())<(){}>)<{[]{}}<(){}>>)[{[[]<>]<[
[[{(<{<<[{(<({<>{}}<()[]>){<<>[]>{<>}}><[[()[]]]{{()<>}{()<>}}])[{[(<>())]<<[]{}>(<>[])>}<[{
(<<<[[<{({<<([{}{}](<><>)){{<><>}(())}>{<{(){}}{[][]}>[{[][]}([]())]}><([{{}[]}[[]{}]](<[]{}><{}<>>))((<(){
<<<{((<<{[([<[[]{}]([][])>{[<>()][[][]]}]<<[()[]][[]{}]>[<<><>>(<><>)]>)<({{{}<>}{{}}}{{<><
{[(<[{{{<[{({([]{}){{}{}}}[({}<>)])[([()[]]<[]{}>)<[{}{}]{{}()}>]}(<{{{}<>}(()[])}>{{<()<>><[]<>>}
[<<{({[{((({<<<><>>(()())>{{[][]}<{}()>}}[[((){})[{}()]]<[()<>]>]){{(<{}<>>[()<>]){{[][]}(()<>
({[([([<(<<[{<<><>>({}())}[[(){}][[][]]]]>><<(({<><>}{[][]})<{()()}[[]<>]>)[{((){}){{}[]}}(<<>()>{{}()})]><<
[[[{[<({{<[[[<{}{}>(()())]{(<>[])([][])}]({{(){}}})]<[<{{}[]}{()}>[{<><>}]][<((){})([][])>]
[(<{<{(<<<<{{[[][]]<()[]>}){{<<>{}>}}>({[(()())(<>[])]}(<{()()}[<>]>{[[]]<<>()>}))>(<[{({}{})}][{[{}()]
<(<<[([[((<<{<[]{}>{{}<>}}(({}())[[]{}])>(<{<>()}[()()]>>>))]{<{{<(<()<>>{{}()})([{}<>](<><>))>
[{[<[([[<[((([()[]]<{}{}>))<{[{}()][(){}]}([{}<>]<()<>>)>)]>[{((([{}()]{()()>)<(<><>)(()[])>)[(([]()
{[{[{<<([({<<[{}()]<()<>>>{[[][]]({}())}>}[[<{{}<>}{<>}>]])(<<{[()[]]}(((){})({}{}))>[({{}()})]>)](
({{{<<<<(([([[<><>]<<>[]>]{<()<>><()[]>})<([<>{}])>])(<<{{()}<()[]>}<([]<>)>>{{[{}()][[]<>]}[{<>}{()()
[{(([{<{{(<{<<[]()>{{}<>}>}[<({}[])<{}<>>><{<>()}>]>)}<{{{{<<>{}>{()()}}}[[{()()}(()<>)><<{}<>>>]}[[(<(){}>(
[[{<[<(<[[<<({{}()}{{}})(({}{})[[]{}])>[([<>{}]({}<>))])]{<[<[[][]]<()<>>>]{([()()]{<><>})<{[]{}}[[]()]>}><
([<<{({[({[({<{}[]>{{}<>}}){<[<>[]]>[(()())]}]{{{{{}[]>{()<>}}}<[{{}<>}<[]()>]([<>]<<><>>)>}})
(([<[[{{(<[{{(()<>)}<<{}()>{<>{}}>}<[<[]()>[()()]]([<>()]{()})>)[(<[<><>]{{}<>}>{{{}()}{[]()}})<
[([[[([[[<[{{<()()>{[][]}}(<[][]>)}[{<{}()>{<>[]}}]]>({[[{<><>}<[][]>]([()]{()[]})]}{([<<><>>[{}(
(<({<[[[[(((({[]{}}<{}<>>)[<(){}>[()<>]])){<(<<>{}>)<<()<>><()[]>>>{[[()()]<[][]>][{{}()}<<>{
{{{{[[<{<{(<(([]())[{}[]])<(()<>){{}{}}}>){{{<{}[]><{}<>>}{(()[])[<><>]}}<{{()()}<<>[]>}>}}><(<[(<{
<<[(<<<([{<{(({}())[{}[]])(<(){}>(<><>))}>([[(<>[])(<>[])]<({}{})<{}>>](((<>())<{}[]>)[[<>
<{{((([[<{[(({<>{}}({}())))[([[]()][{}{}])]]}(([<([][])<<>()>>]<{{<>[]}(()())}[({}())[()()]]>)
(({[{[[[[(<<[[(){}][(){}]]<{()<>}<[][])>>{({[][]}{<>{}}){<[][]>}}><{(([]{}){{}<>}){[()<>][(
{<[[<<([<{<<{[<>{}}{<><>}}(({}()))>[[{[]()}](<<>>{<><>})]><<([<>{}]{[][]})[<{}[]>{<><>}]>>}{[{(<<>()><{}<>
({{{((({<<({<[<>()](()[])]}){((<{}()>{[]<>}){<[]{}>[[][]]})<[[[]{}](())](<{}<>>[{}])>}>[{{[(<>[])]}[<({}{
{<(<[{({[[[{[[{}<>][(){}]]{{(){}}}}<<[[]()]{<>}><[{}[]]>>]{<<((){})[{}]>({<><>}{()[]})><<[{}()]{
[[[(({<((<({<<{}>>}<[([]{})[[]]]>)<<{[()[]](<><>)}><<{[]{}}[[]]>{{()[]}{[]()}}>>><[((<(){}
{{<{{{<<{<{<((<>[])<()[]>)<(<>{}){[][]}>><(({}<>){[][]}){[()<>]{<>{}}}>}>[((<<(){})({}())><([]
[[[{({<[{[[<<(()<>)({}())>({<><>}[<><>])>]]<(<{<()<>>([]())}{[[]<>]{<>()}}>{<([][])((){})>([{}][()<>])})>}]<(
<<{[{[[<([[<<[{}<>]>[({}())<()[]>]>[{<(){}><{}<>>}[<<>>({}{})]]]<<{<()[]><()()>}({{}()}[{}<>])>>]<<([([](
{<<<(<{{[{{{<<{}[]>{()()}>{[<>[]]({}())}}}<[<([]())>{<()()>(()())}][<(()())<{}<>>>((<><>)[[][]]]]>
[[[({<(([[(<({()<>}<[]<>>)>[({[]}{<><>})<<(){}>{<><>}>])]]<(<[<<()()]<{}()>>(<{}()>([][]))]<<{<><>}>>>){
<<[[<({<({[<{(()[])}{{[]()}<[]{}>}>]<[(<[]{}><<>{}>)<[()[]]([]{})>]>})>((<([<[<><>]([]{}}><{<>()}<()[]>>]{
({[[[{{([[((<<{}<>}[{}<>]>)(({{}<>}<()()>)[[[]<>]<()<>>]))<(<{[][]}>)<{{[]<>}<[]<>>}[(<><>){(){}}]>>][<
{<[[[[[<[[{{{{()}[[][]]}[<(){}>[[][]]]}(<[{}{}]>)}(<<<()()>{<>}>>)]<([[[()<>]((){})]([[]()]<{}{}>)]([{{}(
[<(({(((<[(<<[[]{}][<><>]>[{(){}}[[]]]><{{()[]}<<>()>}{{()}{(){}}}>)(<[([]())]<{{}{}}(())>>)]([([{()[]}[[
(({[([{{((({{<<>[]>}}<([{}[]][[]()])[{{}[]}<<>{}>]>)<({([])<[]{}>}){(((){})[<>[]]){<<>[]>[{}()
<{<{(<<({([([([]())(<>[])][{()<>}{<>{}}])](({<()()>{()<>}}{{[]}[[][]]})[[[{}{}][()[]]]])]}(({[[{<>()}[{}()]
[[{[{{[({<{<(<{}<>>)[[{}{}>[<><>]]>[((())([]<>)){([]())<<><>>}]}>{{{<{<>[]}({}{})>{([]{}){[][]}}}[{{<>
[[{[<([{([<<<(<><>){[]{}}>{{[][]}([]<>)}>><{<<<>()>{<><>}>[<[][]>([]())]}({[{}[]]{<>()}}({()()}(()<>)))>])}])
{{<((([<[({{(([]){[][]})[(()<>)<()()>]}{{{()[]}}([()[]][{}{}])}})<{({[()[]]<[]{}>}[<()()><()[]>])
([<<<([{{<({{[{}<>][<>()]}{([]<>){(){}}}}){({<{}()>}[(()){<><>}])}><{<(<()[]>({}{}))(({}{})
{{[([<[{<<{<{[{}[]][(){}]}[[[]()]{()[]}]>}><[(([<>{}]){{<>()}{()<>}}){[{<>{}}[[]<>]]{<[]<>>}}][[[{[]<
{<<<<{(((<{([{{}{}}][[[]()]<<>()>])<([()<>]([]))[[<><>][{}()]]>}{<{{(){}}<()<>>}<{<>{}}{<>()}>>(<{
<[({<{{{<((<<({})([]<>)>((<>[]){[]()}}>)(<[<(){}>({}[])]>[<({}<>){[][]}>[{()<>}<<><>>]]))>[({[([<>{}][{}()])<
(({[[{<{[[((<[<>()]><{()<>}[[]<>]>)([{[]()}[[]()]](({}{}){<>()})>){<{(()())(<>[])}[<()[]>[()()]
[(([{{<{<[{{{[{}{}]<(){}>}[<[]{}>({}())]}({[()[]]{[]()}}[<{}[]>(<>)])}[{{<[]{}>(()<>)}<[[]()]<<>[]>)}<<<<>()
<(<<{<([([(<[{{}<>}<()()>][{()[]}(<><>)]>{{<[]<>><{}[]>>{{{}}{[]<>}}})({[<[]{}>[[][]]]}{{<
((<<<([[<<{([<<>{}>{<>()}])<<{[]{}}[()[]]>>}[<{([]())[<>{}]}>{((()[]){{}<>))[<()<>>([]<>)]}]>{(({[[]]
{<<((({({[<[[[<><>][<>{}]]{({}<>)<()[]>}][<<[]{}}<[]()>>[[[]<>]]]>([[[{}{}]]<<<><>><<>{}>>
[{<([{{<{(<{{{(){}}{{}[]}}(<<>()>[()[]])}{{{{}}(()())}{[()<>]}}>[{[{[][]}{{}<>)]}((((){}){[]{}})(({})<<>{}
[{[(<[{<{{[<{{()()}{()[]}}<<()()><{}[]>>>][<({()()}[()[]]){([][])[<>{}]}>(((()()))((<>{})<{}{
(<(<([<<<{[<({<>}{()()})><((<>))<<{}[]><<><>>>>]{<{[[][]]}{{[]{}}{[]<>}>>[[[[]()]({})]]}}><<<<
<([<(<<<(({{<[<><>]<[]<>>>(<[]()>[{}<>])}[<(()()){{}<>}>]}))<<[{{[<>[]]<()[]>}{(()<>){()()
<[(<{{[[[<(([[<>()]([][])])){{{[()()]{{}[]}}[([]{}){(){}}]}{[<[]>{[]()}][[<>]({}())]}}>]]<(<[{<{<>()}{()[
<{{{[(<{<[<{{<()>(<>{})}[({}()){()()}]]([{<>{}}[()()]](<[]<>><<>{}>))>[<{<[]()>(<>)}<{[]{}}[(
<{(<[<[<{<({<[<><>}[[]()]>}([<(){}><<><>>][<()()><<><>>]))([[([]())<{}>]<[()()]{<>{}}>]{(({}
<(<({(<[<[(((<<>{}>{{}()})){{[[]()](())}{{<><>}<<><>>}})([<<()()><[]())>[[<>()]<<>[]>]][<{()()}
((<[{{(<[([<([()()](<>{}))(<{}()>[{}{}])>({<{}{}>(<>[])})])]>)}<({((([(<[]{}>({}[]))]{((<><>)(()()))}))(({{<{
{({[<<[(<<((<<{}[]>[()<>]>{<<>[]>{[]()}}){[<<><>>[()[]]]<<{}()>[()<>]>})[{[{{}<>}{()}]}<(<()[]><{}{}>)[[
{{[<((<((<{[([[][]]<{}<>>)((()[]))]}>{[{(({}())[()[]]){{[][]}([][])}}](<<[<><>]{<>}><<{}<>><[][]>>>
[[[<(<{{([{(<(<>{})(()<>)><(<>[])[{}()]>)([[[]()][[]<>]])}[[{<[]()>(<><>)}[(()){<>()}]]({{[]()}})]])[[
<({([{(<{{[<<[(){}][[]()>>[[{}{}](()[])]>]{{[[{}<>]{{}<>}]{({}<>)[{}{}]}}[({()()}[{}<>]){((){})}]}}{{[[{{
[[[[{<[<(([<[<[]{}><<>{}>]<<[]<>>(()[])>>([(<>)<{}()>])])<{{({[]{}}{[]()})}<[[<><>]{[]<>}]{<<>()><<>()>}>
<<<[([[(({(<[<{}>[{}()]]{{()}(()[]}}>(<<<>()>(<>[])>))<<[{<>()}{<>[]}][{[]{}}<{}[]>]>>}){<<<(<<>
{{<[{{({{(([[([]{})<{}()>]]))){(<{{<<>[]>(<>[])}<<()><[]<>>>}>([([<>()]<{}[]>)(({}{}))]<<([]())[<>
([<[({[{{[[[({<>{}}<(){}>)({<>[]}{()<>})](([(){}]{[]()}))]<[<(<>[])({}<>)>][[[[]{}]<()>]<<<>[]>{[]<>}>]>]
{[{[[{<(<<({{([]<>)([]{})}<<{}<>><<>[]>>}(({()()}[{}()]){(<><>)[<>[]]]))<<[([])(<>[])]{([]())(
({<<{{[<<[{{<[(){}][[]]><{[]()}<[]{}>>}[<<<>()>{{}()}>[<{}<>>[<><>]]]}](<<[(<>{})[()]}{<<>><[]
<<<([{[([{{[{[[]<>][<>[]]}]}{<([[][]]){[<>[]]<{}()>}><(<[]<>>(<>{}))[<[][]>{<>}]>}}{<{{[<>{}]{()
<((<([([<{<[([{}<>](<>()))<([]<>)([]<>)>][<{()<>}{[]<>}>]>}<{[(<[]()>(<><>))[<(){}>[[][]]]](<([]())<<>[]>>[
{[<[<<{{(<{[{((){})<{}[]>}[([][])]]}{[({()<>}){[{}<>](<>{}))]}>)}<[[(<(<()<>>){(()())([]{})}>({[{}[]]
<([[<({{[<({[({}{}){{}()}]<((){})[<><>]>})([[{[][]}<()<>>]<[()<>][{}{}]>])>]}}){{[(({(({[]()}{()()}
<({([<[{(<[{(({}[]))}[[{[]<>}{{}[]}](({}[]))]]<[[(()[])[()()]]{[{}()>}]>>{<<{[[]<>](()())}[<{}[]>(<>
(([[<(<<[{<(<[{}{}]{()<>}>)((<(){}>([]))({<>{}}[<>[]]))>(<<{()[]}{(){}}>[[<>()]]>[<{()[]}<()[]>>{({}<>){[]<
{<[<<{(<{{<[{[{}()][<><>]}][{({}{})(<>[]))]>{<[[<><>]]<<<>()>({}[])>>({<[]<>>([]<>)}{[(){}]([]{})})
{{<((([<{(([{[<>{}]{{}<>}}])<<<{<>[]}{(){}}>{(()[])[()[]]}>{{<<>()>}([(){}]{{}<>})}>)}{(([{{{}[]}(<>())
{[(<{{{<[[{{[[()[]](<>{})]((()<>)({}[]))}}]][{([[{{}[]}<[]<>>]][{(<>{})}[(<>()){<><>}]])}>>[([
<<<{([((<<{(({{}{}}({}{})))}{(<(<><>)[[]<>]>{[{}[]](<>)})<{{<>()}{{}<>}}<<<>[]><<>()>>>}>>))]){
<{(<[[(({<[{{<<><>><{}<>>}<<<>{}>{()()}>}]>}))[((([([{[]{}}]([{}()][<><>]))(((<>())(<>]))][
([<<[({(({{((<[]{}>{()[]}})({[<><>][<>()]}(<<><>>[[]()]))}{{{(()<>)({}{})}(<{}()><[]()>)}{{{<><>}
[<<<{{<<{<{<<[()()](<><>)>>([({}){{}[]}]{<[]()>{{}()}})}<[{([]())<{}<>>}([{}()]<{}[]>)]<(<[]
{{<[({({<{({((()<>)){[[]()]<(){}>>}<[[{}]{<><>}]<(()<>)<()()>>>)}(({((<><>)[{}[]]){[[]()][()[]]}})<({
<[{<({<({(({{<(){}>[[]{}]}<<[][]><{}{}>>})[(([{}()][<>()]))[(<<>{}>([][]}){[[]{}]}]])[<[{(()<>)[{}<>]}]>]
([(([{<(<{[<{([][]){[][]}}(<<>><[]{}>)>({[<>()]{{}<>}}(<<>[]>{<>{}}))][({{[]()}{[]}}(([]{})(()<>))
<{<<<({[[(<<{(()<>)[[]{}]}<<()()>>>><[({()[]}[[][]]){<[][]>(<><>)}][(({}{})<()[]>){{{}()}<[]{}>}]>)[<((([]{}
<([[([<<<{<<<<<><>>({}())>{{[]()}[{}[]]>>[<[<>()]({}{})>]>(({<{}{}>{<>{}}}{<{}[]>{{}()}}){[<[]()>{()<>}
[{{<{[{{{<{{<([][])[()<>]>{{[]{}}({}())}}((<<>[]>([][])))}><{<<<{}<>><<>()>>{(()<>){[]{}}}>}{([{[][]}{<>{}}])
[({<((({(<{[{<[][]}(<>[])}<<{}<>>{{}<>}>]({{<>()}[{}{}]})}(<{{{}()}<<>[]>}[([]{})<[][]>]>[{(<>
<([[[<{{<<<[(((){})(()()))([<><>]{()})]<<[<>]([])>(([]<>))>>{{[<()>]<(()[])([][])>}[({{}}<{}{
{<<((<[{<{<[{[[][]]{<><>}}{<(){}>{<><>}}]<((<>{})<<>[]>)>>((((<>[]){[]()})({<>()}))([[{}[]]{<>[]}]<
(<{(<[[([[([<({}{})[()<>]>])][<{<({}())><{()()}>}>{[{[{}<>]([])}](([()()]))}]])]]>)}>[[({{
(<[[[{<{[<([{({}{}){{}()}}[(<>{})<()()>]][{{{}()}}<{<>[]}[()<>]>]){{((<><>){()<>])<<<>()>[{}[
<{<<[((<<<{([{{}<>}({})]{((){})[[]<>]})<[[()<>]([]())](<[]<>>({}<>))>}{(<{()[]}>{<[]<>>})<
{[([<[<[({{[<[<>()][{}[]}>((<>())<[]<>>)]{(<{}<>>(()()))([()()])}}}<(<(<<>{}>{<>{}})><({[]{}}[
{{[[[<<<<[[{({[]<>}<()()>)<<(){}>{<><>}>}{[([]<>)[<>[]]]}]{<[{()()}(<><>)]{{<>{}}<[]{}>}>((<{}()>{(){}}))}>>>
({[<[[<{<([<<<()<>}<{}{}>>(<<>[]>(<>()))><{[<>()]({}<>)}<{[]{}}>>])>}{{{<{({[]{}}<<>>)<<[]<>
([((((<(<[({((<>())<()<>>)}([<{}()>{<>()}]{{{}()}{[]<>)}))([<(<>{})><[(){}][<>()]>](([()]<[]{}>)(<{}{}>{()
{[(<{({(<([(<[{}()][{}()]>)[[[{}()](()())]<{[][]}<[]<>>>]][({[()()]{{}{}}}((<><>)(<>())))<<{()()}{[]{}}}[{[]
<([[{<<{<<{(([()<>]{<>[]})<<[][]>({}[])>)({<{}{}>([]<>)})}{<{{[][]}{[]{}}}[((){})((){})]><([[][]]){{()()}}>}
(([<[[[(({{[[[[][]](<>())]{<<>><<>()>}]<<(()<>)>[<<>{}>{<><>}]>}[<(<<><>><{}{}>)[<()<>><[]()>]>[{<()[]>[<
{[{{{[(<<[<[{[()()]<{}<>>}[([]<>)({}<>)]][<{()()}[<>[]]>]>]>>)]{([({[{({<>}(<>{}))[({}())[[][]]]}<{{()[]
(<(<{<{<[[(({[<>[]]<{}[]>}[([]{})(()[])]))({([[]])([()()]{()[]})}<[<<><>><[]<>>]>)]]<([{{{{}<>}(<>)}}<({
[<[{[<<[<<[<{<<>[]}<()>}{(()[])[{}[]]}><[<(){}>{{}[]}]>]>(((<{{}<>}{()[]}><<<>{}>{()[]}>)[[(
[<{(<[<{{([{{<<>{}><[]()>}({(){}}[[]{}])}{[<[][]>[<><>]][<<><>>[{}{}]]}](<<{(){}}({}<>)>(<()[]>[()[]])>
<[{<({((([(<([[]<>]<()[]>)<(<>())>>(<{[][]>(<>{})>[{(){}}]))])))}<<{({<<<([]{})([]())>[{()()}<()<>>]
<[(<{((({<<{{[{}<>]}[[<>{}]({}[])]}{(<{}[]}{<>})<{[]()}[()[]]>}>>}))(<<[<<(<<>{}><<>{}>)<<'''
'''input_10_list = [list(i) for i in input_10.splitlines()]
brackets = {'(': ')', "{": "}", "[": ']', "<": ">"}
points = {
    ')': 3,
    ']': 57,
    '}': 1197,
    '>': 25137}
points2 = {
    ')': 1,
    ']': 2,
    '}': 3,
    '>': 4}
scores = []
score = 0
for i in input_10_list:
    stack = []
    for x in i:
        if x in brackets.keys():
            stack.append(x)
        elif x in brackets.values():
            if brackets[stack[-1]] == x:
                stack.pop()
            else:
                score += points[x]
                break
    else:
        tot = 0
        for c in reversed(stack):
            tot *= 5
            tot += points2[brackets[c]]
        scores.append(tot)
print(score)
print(statistics.median(scores))'''
# day_11:1
input_11 = '''3265255276
1537412665
7335746422
6426325658
3854434364
8717377486
4522286326
6337772845
8824387665
6351586484'''
'''input_11_list = [list(map(int, list(i))) for i in input_11.splitlines()]
days = 1000
count = 0
DR = [-1, 0, 1, 0, -1, 1, -1, 1]
DC = [0, -1, 0, 1, -1, -1, 1, 1]
t = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
for day in range(days):
    if input_11_list == t and p:
        print("ans part 2 = ", day) # take 1st out as ans
    lis = []
    for y in range(len(input_11_list)):
        for x in range(len(input_11_list[0])):
            input_11_list[y][x] += 1
            if input_11_list[y][x] > 9:
                lis.append((x, y))
    while lis:
        p = lis.pop()
        if input_11_list[p[1]][p[0]] == 0:
            continue
        input_11_list[p[1]][p[0]] = 0
        count += 1
        for i in range(8):
            rr = p[1] + DR[i]
            cc = p[0] + DC[i]
            if 0 <= rr < len(input_11_list) and 0 <= cc < len(input_11_list[0]):
                if input_11_list[rr][cc] != 0:
                    input_11_list[rr][cc] += 1
                    if input_11_list[rr][cc] > 9:
                        lis.append((cc, rr))
print(count)'''
# day_12:1
input_12 = '''ey-dv
AL-ms
ey-lx
zw-YT
hm-zw
start-YT
start-ms
dv-YT
hm-ms
end-ey
AL-ey
end-hm
rh-hm
dv-ms
AL-dv
ey-SP
hm-lx
dv-start
end-lx
zw-AL
hm-AL
lx-zw
ey-zw
zw-dv
YT-ms'''
'''edges = collections.defaultdict(set)
for i in input_12.splitlines():
    s, d = i.split('-')
    edges[s].add(d)
    edges[d].add(s)
print(edges)
all = set()
todo = [('start', )]
while todo:
    p = todo.pop()
    if p[-1] == 'end':
        all.add(p)
        continue
    for i in edges[p[-1]]:
        if not i.islower() or i not in p:
            todo.append((*p, i))
print(len(all))'''
# day_12:2
'''edges = collections.defaultdict(set)
for i in input_12.splitlines():
    s, d = i.split('-')
    edges[s].add(d)
    edges[d].add(s)
print(edges)
all = set()
todo = [(('start', ), False)]
while todo:
    p,dc = todo.pop()
    if p[-1] == 'end':
        all.add(p)
        continue
    for i in edges[p[-1]]:
        if i == 'start':
            continue
        elif i.isupper() or i not in p:
            todo.append(((*p, i), dc))
        elif not dc and p.count(i) == 1:
            todo.append(((*p, i), True))

print(len(all))'''
# day_13
input_13 = '''462,575
1293,547
560,735
441,425
261,824
425,716
1133,106
49,705
666,563
1091,393
529,845
192,703
637,557
37,586
621,423
986,205
748,5
1076,450
13,452
120,585
770,324
157,344
708,86
855,689
1116,206
683,845
627,845
460,438
910,239
420,546
965,127
1258,658
808,86
1165,179
345,421
595,378
1290,409
345,127
810,772
184,285
808,808
154,122
102,324
1218,341
505,666
748,31
308,553
1022,764
1253,698
1014,464
1021,35
1265,563
306,833
470,465
242,17
1014,318
1273,187
1299,696
172,576
1200,360
392,710
154,766
388,157
59,702
371,367
1022,130
1151,651
185,19
60,402
309,547
1087,180
1136,86
1091,852
272,651
1158,767
962,485
693,35
810,324
303,334
289,245
195,114
992,794
830,693
90,508
1238,43
950,824
360,789
1074,45
1261,14
234,641
853,577
788,113
564,640
1129,795
244,743
431,404
1141,568
830,584
869,21
132,392
1054,415
991,19
1039,505
1032,716
1126,609
597,868
412,17
82,289
1109,611
1277,423
1094,310
455,205
879,404
221,537
410,308
835,232
380,758
1049,669
889,476
840,410
63,801
1156,430
900,586
1052,150
398,535
644,563
788,688
810,570
609,331
1014,800
490,642
1273,138
1148,285
480,534
420,796
45,787
421,663
254,498
187,383
1022,511
371,143
716,492
192,863
1220,254
576,774
786,460
90,386
57,266
1062,568
162,492
383,837
1178,654
874,579
154,576
370,231
340,520
830,23
705,425
803,128
433,378
972,77
90,366
1159,472
1295,680
626,858
303,560
1195,326
293,759
132,8
768,102
910,463
488,233
877,537
1290,285
1007,96
420,775
462,191
914,598
1125,248
1021,245
843,677
1125,646
536,504
17,547
885,716
1211,452
562,863
791,329
370,651
480,667
90,106
219,841
1216,159
914,296
562,612
910,655
299,341
185,248
358,616
515,665
679,320
619,669
982,116
667,366
910,172
913,700
746,386
174,86
828,122
1278,824
118,168
457,317
309,25
256,791
87,46
726,889
172,401
797,467
972,758
1241,700
544,534
70,556
1071,400
441,469
191,721
1099,387
42,679
433,68
289,649
219,42
939,639
1041,266
1300,705
500,401
1081,402
1168,17
27,49
806,646
443,277
711,260
711,617
843,5
397,28
197,317
1175,329
120,309
324,205
803,688
547,729
1021,49
194,591
177,323
522,662
318,100
457,410
1171,782
223,180
959,357
273,665
15,886
959,89
234,761
949,837
709,61
917,376
277,189
59,726
507,438
208,56
952,616
358,800
1115,114
1218,388
488,653
999,240
315,590
930,787
229,44
962,149
303,308
1267,751
666,555
947,256
759,728
1020,166
818,161
176,150
365,201
69,28
1253,404
398,434
236,177
1230,549
290,166
616,667
698,679
599,53
617,586
1293,347
107,184
49,14
522,232
507,791
1054,255
750,607
1037,217
257,194
1138,625
1250,492
1077,418
1053,866
242,877
172,269
1111,422
294,822
960,640
738,605
196,684
412,701
1134,744
539,171
929,173
273,217
584,777
395,498
1275,449
870,120
470,410
1036,115
393,152
937,563
1094,624
25,807
594,402
633,63
972,563
1016,789
965,767
206,189
174,3
759,812
774,390
869,873
174,808
952,128
181,627
755,578
109,397
218,315
582,478
244,744
28,708
1146,642
446,838
277,705
472,882
1203,710
869,469
324,689
992,100
293,241
798,297
1293,109
1098,770
502,879
631,320
500,464
239,400
1113,634
482,576
783,689
1066,743
705,469
1043,702
1240,301
1300,339
523,332
1052,271
1150,529
734,344
987,418
151,24
396,598
842,640
92,770
1299,472
895,848
160,365
452,130
510,553
366,764
952,94
497,550
507,688
780,159
523,285
890,796
222,126
290,728
1038,747
400,844
387,740
1220,834
769,201
1074,177
962,385
52,563
1081,850
17,557
160,877
585,28
1028,145
781,49
541,201
808,127
184,609
691,163
736,875
366,831
823,203
139,782
380,422
868,210
818,385
150,840
984,642
356,239
147,8
579,46
408,698
1300,555
355,173
1066,744
969,429
864,838
229,850
713,868
201,283
412,877
643,646
1044,381
42,215
232,383
852,210
900,157
57,420
803,662
509,669
1081,619
666,369
1007,560
356,59
1086,857
254,851
500,548
281,779
1113,577
512,297
358,278
441,320
551,728
711,277
356,507
164,642
457,577
667,198
467,453
1007,287
442,322
808,564
400,396
236,190
758,435
673,557
1242,240
590,184
48,124
952,352
1094,584
806,16
883,452
348,205
1186,735
922,140
955,721
584,5
759,166
276,413
1076,892
299,385
940,231
160,529
981,366
1247,93
619,445
145,764
141,427
10,563
1203,184
519,497
1001,421
234,450
929,721
211,387
1136,534
1091,53
1005,826
1089,537
308,341
1161,795
551,812
934,770
759,714
962,409
830,871
1038,651
1298,128
82,243
99,452
150,16
832,150
830,63
1160,486
858,764
894,453
522,654
944,77
688,70
132,662
20,689
55,505
1014,430
92,813
1091,841
726,749
420,343
551,714
1118,863
418,640
1088,691
1017,653
1111,870
898,365
53,833
1165,225
132,367
999,680
1160,296
1011,341
192,260
885,850
808,106
1087,728
410,157
1007,308
791,777
32,70
1171,138
1241,7
1037,173
928,243
502,127
363,333
892,269
92,889
467,159
150,408
431,714
349,378
155,306
962,689
371,255
746,640
512,578
1056,43
269,628
110,360
1131,654
480,63
256,415
523,609
917,611
1124,651
388,829
1158,127
539,540
1190,219
1119,721
382,243
599,277
311,240
256,551
256,191
1131,775
480,693
1032,178
1275,669
271,505
120,231
90,528
105,565
415,848
482,122
1273,586
705,880
827,588
708,331
705,462
813,344
10,555
864,614
1020,728
457,260
1014,662
262,710
502,564
187,96
611,191
197,577
1176,255
1108,607
626,484
776,579
507,128
520,736
972,331
311,214
890,31
1034,413
1054,236
49,257
801,893
677,383
907,680
582,431
1240,106
922,754
244,308
1056,330
303,565
1128,882
500,576
805,795
1028,749
555,578
520,611
584,749
1150,437
1220,508
599,389
370,203
541,96
388,140
1108,578
770,570
363,449
1238,431
149,795
1160,248
1310,604
945,35
1126,161
1124,30
595,516
923,702
1088,574
803,318
788,527
345,473
1158,106
90,254
840,484
939,255
1190,309
769,693
348,689
234,431
1186,579
974,794
1190,585
1017,759
851,562
774,504
405,651
246,849
224,435
1136,511
728,478
605,880
1126,18
769,96
505,795
944,831
1275,445
179,775
912,191
1017,241
1054,191
1228,289
1049,824
435,42
185,646
770,772
522,54
810,464
1126,733
33,535
549,117
258,598
830,511
560,607
698,428
1099,501
289,49
469,26
534,137
940,203
791,117
912,133
898,465
278,770
42,663
929,665
345,767
1118,611
668,240
500,16
356,835
622,553
30,728
683,49
480,310
851,556
185,868
343,438
1118,283
216,24
170,453
522,688
48,322
724,150
1261,432
256,639
92,388
441,21
339,696
1300,257
913,28
1216,831
157,550
1078,511
708,584
372,749
416,453
1190,579
1138,401
913,562
114,44
890,282
363,256
912,775
1258,534
980,793
1176,639
266,795
917,152
488,661
432,574
236,717
1293,465
1016,822
363,445
1047,443
381,665
124,831
1134,150
671,438
740,477
830,310
1190,427
184,876
162,733
1273,859
642,128
1009,311
564,386
398,133
835,119
534,427
1280,166
113,96
622,70
642,240
1102,838
536,145
869,320
254,43
1053,700
90,0
279,709
358,318
60,157
959,565
673,773
162,228
858,130
833,323
477,123
17,785
1240,556
644,369
1007,112
520,606
493,304
930,154
507,567
708,563
689,807
157,120
987,476
1196,850
1156,766
10,787
1144,661
599,617
420,450
208,838
256,684
13,218
494,877
162,442
20,289
801,715
487,203
788,232
551,166
11,472
154,772
534,467
1068,529
890,431
477,771
1056,526
326,252
783,653
1028,726
492,812
186,651
621,535
534,757
216,270
1123,511
1123,798
422,856
900,138
1017,87
1021,649
971,696
878,203
432,126
45,107
1026,427
492,161
790,736
552,530
1098,12
212,770
256,255
408,45
1190,189
612,428
57,474
1148,666
398,313
617,756
433,516
684,484
512,597
1165,681
694,667
459,562
1053,194
257,866
748,282
32,824
283,367
1138,766
219,53
238,889
985,366
821,590
202,607
1268,679
70,301
918,710
194,206
689,87
944,817
830,463
788,54
432,768
1190,227
1104,579
830,808
97,824
393,669
564,508
616,227
676,485
49,432
296,662
1019,1
1007,586
1125,870
132,654
446,504
1261,462
1019,893
412,465
961,516
837,877
808,779
818,609
305,826
1253,490
63,452
1253,266
1287,320
808,63
1218,813
1014,232
338,563
293,653
171,362
1202,763
244,586
1158,107
919,3
380,154
1004,205
1178,240
1218,506
288,578
746,672
278,178
788,654
1116,303
1190,705
867,277
1178,232
162,161
694,675

fold along x=655
fold along y=447
fold along x=327
fold along y=223
fold along x=163
fold along y=111
fold along x=81
fold along y=55
fold along x=40
fold along y=27
fold along y=13
fold along y=6'''
'''cords, folds = input_13.split("\n\n")
cords = [list(map(int, i.split(','))) for i in cords.splitlines()]
folds = [[i.split()[2].split('=')[0], int(i.split()[2].split('=')[1])] for i in folds.splitlines()]
for fold in folds:
    for cord in cords:
        if fold[0] == 'y':
            cord[1] = fold[1] - abs(cord[1] - fold[1])
        elif fold[0] == 'x':
            cord[0] = fold[1] - abs(cord[0] - fold[1])
cords = list(collections.Counter(tuple(i) for i in cords).keys())
def print_cords():
    mx = max(x for x, _ in cords)
    my = max(_ for x, _ in cords)
    for i in range(my+1):
        for x in range(mx+1):
            if (x, i) in cords:
                print("#", end="")
            else:
                print(" ", end="")
        print()

print_cords()
print(cords)'''
# day_14:1 <- sloppy
input_14 = '''OFSVVSFOCBNONHKFHNPK

HN -> C
VB -> K
PF -> C
BO -> F
PB -> F
OH -> H
OB -> N
PN -> O
KO -> V
CK -> V
FP -> H
PC -> V
PP -> N
FN -> N
CC -> F
FC -> N
BP -> N
SH -> F
NS -> V
KK -> B
HS -> C
NV -> N
FO -> B
VO -> S
KN -> F
SC -> V
NB -> H
CH -> B
SF -> V
NP -> V
FB -> P
CV -> B
PO -> P
SV -> P
OO -> V
PS -> C
CO -> N
SP -> B
KP -> H
KH -> S
KS -> S
NH -> K
SS -> P
PV -> P
KV -> V
ON -> N
BS -> C
HP -> K
SB -> P
VC -> B
HB -> N
FS -> V
VP -> K
BB -> N
FK -> S
CS -> P
SO -> F
HF -> F
VV -> C
BC -> S
SN -> K
KB -> H
BN -> H
HO -> S
KC -> F
CP -> S
HC -> S
OS -> K
NK -> N
BF -> S
VN -> B
SK -> K
HV -> B
KF -> H
FV -> B
VF -> H
BH -> S
NN -> O
HH -> K
CN -> H
PH -> V
NF -> S
OV -> P
OC -> V
OK -> H
OF -> H
HK -> N
FH -> P
BK -> N
VS -> H
NO -> V
VK -> K
CF -> N
CB -> N
NC -> K
PK -> B
VH -> F
FF -> C
BV -> P
OP -> K'''
'''start, code = input_14.split('\n\n')
code = {i.split(' -> ')[0]: i.split(' -> ')[1]for i in code.splitlines()}
steps = 10
for i in range(steps):
    t = start.copy()
    count = 0
    for x in range(len(t)-1):
        if t[x] + t[x+1] in code.keys():
            start.insert(x+1+count, code[t[x] + t[x+1]])
            count+=1
print(collections.Counter(start))
print(max(collections.Counter(start).values()) - min(collections.Counter(start).values()))'''
# day_14:2 <- optimized solution
'''pairs = collections.Counter()
for i in range(len(start)-1):
    pairs[start[i:i+2]] += 1
steps = 40
for x in range(steps):
    nc = collections.Counter()
    lets = collections.Counter()
    for i, v in pairs.items():
        nc[i[0]+code[i]] += v
        nc[code[i] + i[1]] += v
        lets[i[0]] += v
        lets[code[i]] += v
    pairs = nc
lets[start[-1]] += 1
print(max(lets.values()) - min(lets.values()))'''
# day_15
input_15 = '''7135912411912798932871391322889941544645211112288183969191588665579426181549613954113914616349281119
8818482819182139319112316373697999126211219541956811442497469891197212131227119531231231297911937841
1514575112959236914131559711156719336447259942553728322911271774241293394881913682176891871931225931
3911411211611179328267522115348239963876196416413136271519591723261183181259792938429689524986199662
7641142151561121642912253491632132312682391976219236246811321441614458168298442897517119286294427143
2121192132289162313728563181871122493359816197929334844219181379799666376121879896792359861963352341
7824634877975124922137296299957468954179392824124437392871314337752916614225212219614414683959191151
4697413917922193912419678321922133939613861216689158123571322738228138479426524278182172119312848883
8924576358796711856729358848547891622733114113537182199512138345191419912781799661213494977849752719
9132169172714432689989487585816291188372945729446982887385921614921294423815188486235978437499258722
9929612116117322929192611415689558648414234962111998328276736614756763995581743581596537519892142521
6859462858823445699961194293368522127111119151871541859481733312151116149914179449331819839353155113
8988116192491137816954351881298779248676485369639447862482485217115384714391817295351133512843746966
7571297119217394373851931827249232122997672148435518981284665125835621941441532141274393695122619314
3939863898771614631946691997721854917392211921111728141868588118885471347186178748851776892861438443
2155858821839528992349995595944111672471514987919211316318272884633628411528621318162698112862229923
2691764214377199693151237477259942269443921791894817178521112414184311435491289747591145199572891861
2183942132282912239178796993312121721766259916716468139198515826259948419825368918945525463932414235
9154869181176678119983249451922785744127441495675634793648176729934175835771217248334139962527974988
8316744932991141279996315662192146345781219556153198919381318996543312112711981728293841548111952196
1678649394142988654712416121184133779252711945121896991914229495253651999438942623918521884672772847
2188335827591362911271449532775346481117326676931792861349422858831552256823539837899371212511711813
1137111476222151188969945128797252113619562499638219193695753685119112178441254646513776815961119391
1311494299181429199922894135898194891799252689612799393219881531897359146294437998966817122264298246
7869971941425993845734716136911492866591595142713692655681732461441353982895789121752626869711378115
9239951784171297254939792866381495619396182347224976131529736151479936377316511523536618939221132899
7581784265611979969632696671661117125328674794912934429399563111498429917632932111221563912112515273
7367291592679814612371895444265262975496492458115911411475523864214631973161319915171412551791413376
6143589915761117133161228522845431711285983623123914475415191119611426132353137122133138131833612241
7315896136915814193423598722861235221151383267818971821574386831514941997259725791289186442371844418
2944988532619915833681566922831548513196692639711234911281599216462185722897881931171312789137243721
3415172717189389569477924294841849972631114691111623229683952159862188171818115133384485154497599559
1443919891944499961536175263268527116362122922287285719966998199199441931137574959919144151197817839
9774211468397683929442718999171788895916913394193919232141112487256919224143149441799394272131971871
3198272448962643191324588811488161219314122782581211597498382898541626779286175517151236427512269349
2641494257999752612311911198184769891171431782812383711226539636119129192822936482141279883592179266
2119972469619139184934989573412475621816182148681881122375284211995236284989831151661817931779422112
7295958272613111691177736161533154911323159856156237541831115325212648628989877768131262418812991296
9179734481249251841492271271519693142191924942413892511575142934295889198126293312336342918151758162
1918288372217685211881621182876373641278237319193188611518466628913951431547316142239282889861971168
6481288831198825137983699584119844171277298465968692235991695699839824893811316389191284779455458926
8396111649592147388769281297398198661114743131873363398675119721739926264694823462335131594481481373
2434215191197181483294466759973649632193194912131483571345665393945693919958491191412791223154934727
7871951292356181798923129711323861114141919495144297269813147499439323419895693812252459742998597441
1574717591196738322951111198251131842829721216144119624318859125151713218899752276339146481494861892
1819991568362993452123883231325566449151533275721919561992199831792982843649316477921121367147112896
7164846864939958375749731419384111621136661946642611971828921433914128176165123794829624567184522488
4785123474241882671572457297581589514786127561961119193971931191877171612248351111414768782178179192
6227491725442145283239476196991134314139115335311416974791813981549591345151138264431591871129924992
9525981188584231132225439982816211118263916789496251772415921912198419411784321547231797226171319518
5276492419192822328129329248691592169731892693238887119782761121281198881289143311556111145762141969
3128271331163834865261684351337989624523993845875478623191688489571627219561929218973142745155346265
4193551178487292216333184531282141936739498223496986982695779191177684516564996992993218533675828331
2178191346196125243262494112463518611452132231119193528129991178147134976927614139217336689471498249
6129713279458826397211359112797612571949711626579326212321673631424994612159994119946275596513947795
3513497921274818281264559359411281941591491117122122513632133498123984489432938585627194427716713591
3735691482998186339938618867117735735847168696112281481791121411985468672769129111298118716916287399
1871918977115917121139294513119138122212125991828911437898741676491287516364929242332123121247291921
2172938726152562311291781426375458965363121645283962593961676981631211918396931794147343949131142886
3563293612799972919112123214912219918111635798791497828431231792831311217641761129849469863965344918
1199166791334792849211686283551172171219541419495341213428632733677312221229433611169995941144111147
6394369495897282264742163299416336447831867811285891952214644819921138169319196919342859116381114162
1373926897138229918126319121589683666822323221358191793312332391875371695224911132182819762271622842
1395938837219999119653897313168437621521184698183523953888133528386521187834914545761589174121311297
9148392198938912815631892856379782259177441991512171923741241392634839192197699439238712971285121718
9617115534391147936286149747257196999197226833236193228161416125387152377324271993189142587565889216
1138362373562714886584858791749611811391259594249851471911421657411858414811911739328179589614345311
2123263137952269324948912289526328291197821918189951818829272897911921983618661121229352371999183526
5364542519321819925791596927167149711914374975527491381956921757465199133213416132899957474191996977
1929347192289551889583428247594612171742195719193841918882922816292422493651515188151411754731924869
1692134868984869947615245132531711235666968796975199664129196512199668151246836942177187915931113294
7118262375923241337938127228199296914375632221737416368412524122981911769239158321157253335191842293
3265737381753813995198616644314148942312543211211966982383799621211653591584222576569677423117196363
9111924341513711995134611113399813147951464737687954215191822862835181297749588181342888512621814237
3947613151114693862482811617516971318912913889228941136129781272113943413319524119274915826444984968
5124181549192167218912741168272953789192961976729911857199221329892492339197918893411144398169336194
1485129117199312786562116458324116828444543126133413128119541914771248211512152882987215871197292423
7422889855487415671335853281581333169614425918126836514342948114194791483915918432221121929323211132
1397784733219914119249936528322918311193215184294314164148919316331195897687294516359772213253697211
4717364471215123665331721971981229594119554941752216989211613831529573361213916861111893555851517418
4475292919699311784787119799878541261915191691592987284894722138693167937451131188958781235581483286
1714644391788411669199191897458772783119829374655796257128313876192611966566911569752913319295999161
5353589995929755657711912453381161722689758111263452119611629592723857772946211138911548213132414261
2323191817916231415963297418916213749962744352527498552191811131527176211561691378514642127964489253
8152739983512395662414199891116913122891128119944989152213551956193871323119712519943171227126393112
4277581221626287191599922889219313146698155917772441677491134651142134839446179968189181111117921264
1529718132292294511939933926184891864671981421194613891858891618413249116991111313819714816391282114
2736713356811187816216326169766914131244193378437739141121325532382168695918714583941211765269841845
6861393358329912377611366412273921772179929351971811612713977218371523129424314194646292115794965959
3679491485643668398349312922716981614177469361188111177278192895776778119176811991694871925591898988
7848791135845793449869357967261811862593411114238191934518272187499291243315361136315316349516559897
2411183429933422439362133562818449269911144591895315983271911239311885918348116127395818295417142197
1149999499271716641741695755112598414296811143775898536992648741825632691771283631891964299913386859
7697191119989531956155347154456132115329827725927411161313639157441831911577982311114748522118581583
1815888198921498665618218659132911455457193212697148817464169664117619551412423137492313588316296486
9485595239675134411169618995341912442884121821776319272924315115347989581919156755236917322517294195
9781159216631418625141321358419192261944897168929996578364222131392382311288714992416184543214582115
5163463131885451189428292988121225981319219157179263733192533612392419373399148619195391911225811356
2199395612171271152392819795216311991115818792511159521265359573629956281827812821311719715781738737
2126356321322111185843117549923315199213385946175489294117624711949445499157452371358923199949713123'''
'''
Grid = [list(map(int, i.strip())) for i in input_15.splitlines()]
GridDistances = defaultdict()
Height = len(Grid)
Width = len(Grid[0])
NewHeight = Height * 5
NewWidth = Width * 5
ImperialHoldings = set()
ImperialFrontier = [(0, (0, 0))]
Directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
Expand = True
Cycles = 0
while Expand:
    Cycles += 1
    if not ImperialFrontier:
        break
    NextExpansion = ImperialFrontier.pop(0)
    CurDistance = NextExpansion[0]
    Y = NextExpansion[1][0]
    X = NextExpansion[1][1]
    ImperialHoldings.add((Y, X))
    GridDistances[Y, X] = CurDistance
    if Y == NewHeight - 1 and X == NewWidth - 1:
        Expand = False
        break

    for t in Directions:
        NY = Y + t[0]
        NX = X + t[1]
        if 0 <= NY < NewHeight and 0 <= NX < NewWidth and (NY, NX) not in ImperialHoldings:
            GY = NY % Height
            GX = NX % Width
            Repeat = NY // Height + NX // Width
            NewDistance = Grid[GY][GX] + Repeat
            NewDistance = (NewDistance - 1) % 9 + 1
            NewTotalDist = NewDistance + CurDistance
            ImperialFrontier.append((NewTotalDist, (NY, NX)))
            ImperialHoldings.add((NY, NX))

    ImperialFrontier = sorted(ImperialFrontier)
    if Cycles % 5000 == 0:
        print(f"{Cycles = }")

print(GridDistances[Height - 1, Width - 1])
print(GridDistances[NewHeight - 1, NewWidth - 1])'''
# day_16
input_16 = ''''''
